"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const Encoder_1 = require("./Encoder");
const IonRequest_1 = require("./IonRequest");
const IonSdkConfig_1 = require("./IonSdkConfig");
const JsonCanonicalizer_1 = require("./JsonCanonicalizer");
const Multihash_1 = require("./Multihash");
/**
 * Class containing DID related operations.
 */
class IonDid {
    /**
     * Creates a long-form DID.
     * @param input.document The initial state to be associate with the ION DID to be created using a `replace` document patch action.
     */
    static createLongFormDid(input) {
        return __awaiter(this, void 0, void 0, function* () {
            const createRequest = yield IonRequest_1.default.createCreateRequest(input);
            const didUniqueSuffix = yield IonDid.computeDidUniqueSuffix(createRequest.suffixData);
            // Add the network portion if not configured for mainnet.
            let shortFormDid;
            if (IonSdkConfig_1.default.network === undefined || IonSdkConfig_1.default.network === 'mainnet') {
                shortFormDid = `did:ion:${didUniqueSuffix}`;
            }
            else {
                shortFormDid = `did:ion:${IonSdkConfig_1.default.network}:${didUniqueSuffix}`;
            }
            const initialState = {
                suffixData: createRequest.suffixData,
                delta: createRequest.delta
            };
            // Initial state must be canonicalized as per spec.
            const canonicalizedInitialStateBytes = JsonCanonicalizer_1.default.canonicalizeAsBytes(initialState);
            const encodedCanonicalizedInitialStateString = Encoder_1.default.encode(canonicalizedInitialStateBytes);
            const longFormDid = `${shortFormDid}:${encodedCanonicalizedInitialStateString}`;
            return longFormDid;
        });
    }
    /**
     * Computes the DID unique suffix given the encoded suffix data string.
     */
    static computeDidUniqueSuffix(suffixData) {
        return __awaiter(this, void 0, void 0, function* () {
            const canonicalizedStringBytes = JsonCanonicalizer_1.default.canonicalizeAsBytes(suffixData);
            const multihash = yield Multihash_1.default.hash(canonicalizedStringBytes, IonSdkConfig_1.default.hashAlgorithmInMultihashCode);
            const encodedMultihash = Encoder_1.default.encode(multihash);
            return encodedMultihash;
        });
    }
}
exports.default = IonDid;
//# sourceMappingURL=IonDid.js.map