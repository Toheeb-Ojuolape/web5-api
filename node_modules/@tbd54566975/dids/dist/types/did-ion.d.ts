import type { PublicKeyJwk, PrivateKeyJwk } from '@tbd54566975/crypto';
import type { DidResolutionResult, DidMethodResolver, DidMethodCreator, DidState, DwnServiceEndpoint } from './types.js';
export type DidIonCreateOptions = {
    keys?: KeyOption[];
    services?: ServiceOption[];
};
export type ServiceOption = {
    id: string;
    type: string;
    serviceEndpoint: string | DwnServiceEndpoint;
};
export type KeyOption = {
    id: string;
    type: string;
    keyPair: {
        publicJwk: PublicKeyJwk;
        privateJwk: PrivateKeyJwk;
    };
    purposes: string[];
};
export declare class DidIonApi implements DidMethodResolver, DidMethodCreator {
    private resolutionEndpoint;
    /**
     * @param resolutionEndpoint optional custom URL to send DID resolution request to
     */
    constructor(resolutionEndpoint?: string);
    get methodName(): string;
    create(options?: DidIonCreateOptions): Promise<DidState>;
    resolve(did: string): Promise<DidResolutionResult>;
    /**
     * Generates two key pairs used for authorization and encryption purposes
     * when interfacing with DWNs. The IDs of these keys are referenced in the
     * service object that includes the dwnUrls provided.
     */
    generateDwnConfiguration(dwnUrls: string[]): Promise<DidIonCreateOptions>;
    /**
     * Generates two key pairs used for authorization and encryption purposes
     * when interfacing with DWNs. The IDs of these keys are referenced in the
     * service object that includes the dwnUrls provided.
     */
    static generateDwnConfiguration(dwnUrls: string[]): Promise<DidIonCreateOptions>;
}
//# sourceMappingURL=did-ion.d.ts.map