import type { DidKeyOptions, DidIonCreateOptions, DidMethodApi, DidMethodCreator, DidMethodResolver, DidResolverCache, DidResolutionResult, DidState } from '@tbd54566975/dids';
import { DidResolver } from '@tbd54566975/dids';
type CreateMethodOptions = {
    ion: DidIonCreateOptions;
    key: DidKeyOptions;
};
type CreateOptions<M extends keyof CreateMethodOptions> = CreateMethodOptions[M];
export type DidApiOptions = {
    didMethodApis: DidMethodApi[];
    cache?: DidResolverCache;
};
export declare class DidApi {
    private didResolver;
    private methodCreatorMap;
    /**
     * returns the DID resolver created by this api. useful in scenarios where you want to pass around
     * the same resolver so that you can leverage the resolver's cache
     */
    get resolver(): DidResolver;
    constructor(options: DidApiOptions);
    /**
     * Creates a DID of the method provided
     * @param method - the method of DID to create
     * @param options - method-specific options
     * @returns the created DID
     */
    create<M extends keyof CreateMethodOptions>(method: M, options?: CreateOptions<M>): Promise<DidState>;
    /**
     * Resolves the provided DID
     * @param did - the did to resolve
     * @see {@link https://www.w3.org/TR/did-core/#did-resolution | DID Resolution}
     * @returns DID Resolution Result
     */
    resolve(did: string): Promise<DidResolutionResult>;
    /**
     * can be used to add different did method resolvers
     * @param _resolver
     */
    addMethodResolver(_resolver: DidMethodResolver): void;
    /**
     * can be used to add differed did method creators
     * @param _creator
     */
    addMethodCreator(_creator: DidMethodCreator): void;
}
export {};
//# sourceMappingURL=did-api.d.ts.map