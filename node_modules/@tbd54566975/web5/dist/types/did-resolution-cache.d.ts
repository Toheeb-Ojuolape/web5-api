import type { DidResolutionResult, DidResolverCache } from '@tbd54566975/dids';
export type DidResolutionCacheOptions = {
    location?: string;
    ttl?: string;
};
/**
 * naive level-based cache for did resolution results. It just so happens that level aggressively keeps as much as it
 * can in memory when possible while also writing to the filesystem (in node runtime) and indexedDB (in browser runtime).
 * the persistent aspect is especially useful across page refreshes.
 */
export declare class DidResolutionCache implements DidResolverCache {
    #private;
    private cache;
    private ttl;
    constructor(options?: DidResolutionCacheOptions);
    get(did: string): Promise<DidResolutionResult | void>;
    set(did: string, value: DidResolutionResult): Promise<void>;
    delete(did: string): Promise<void>;
    clear(): Promise<void>;
    close(): Promise<void>;
}
//# sourceMappingURL=did-resolution-cache.d.ts.map