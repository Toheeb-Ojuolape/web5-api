// src/json-rpc.ts
var JsonRpcErrorCodes = /* @__PURE__ */ ((JsonRpcErrorCodes2) => {
  JsonRpcErrorCodes2[JsonRpcErrorCodes2["InvalidRequest"] = -32600] = "InvalidRequest";
  JsonRpcErrorCodes2[JsonRpcErrorCodes2["MethodNotFound"] = -32601] = "MethodNotFound";
  JsonRpcErrorCodes2[JsonRpcErrorCodes2["InvalidParams"] = -32602] = "InvalidParams";
  JsonRpcErrorCodes2[JsonRpcErrorCodes2["InternalError"] = -32603] = "InternalError";
  JsonRpcErrorCodes2[JsonRpcErrorCodes2["ParseError"] = -32700] = "ParseError";
  JsonRpcErrorCodes2[JsonRpcErrorCodes2["TransportError"] = -32300] = "TransportError";
  JsonRpcErrorCodes2[JsonRpcErrorCodes2["BadRequest"] = -50400] = "BadRequest";
  JsonRpcErrorCodes2[JsonRpcErrorCodes2["Unauthorized"] = -50401] = "Unauthorized";
  JsonRpcErrorCodes2[JsonRpcErrorCodes2["Forbidden"] = -50403] = "Forbidden";
  return JsonRpcErrorCodes2;
})(JsonRpcErrorCodes || {});
var createJsonRpcErrorResponse = (id, code, message, data) => {
  const error = { code, message };
  if (data != void 0) {
    error.data = data;
  }
  return {
    jsonrpc: "2.0",
    id,
    error
  };
};
var createJsonRpcNotification = (method, params) => {
  return {
    jsonrpc: "2.0",
    method,
    params
  };
};
var createJsonRpcRequest = (id, method, params) => {
  return {
    jsonrpc: "2.0",
    id,
    method,
    params
  };
};
var createJsonRpcSuccessResponse = (id, result) => {
  return {
    jsonrpc: "2.0",
    id,
    result: result != null ? result : null
  };
};
function parseJson(text) {
  try {
    return JSON.parse(text);
  } catch (e) {
    return null;
  }
}
export {
  JsonRpcErrorCodes,
  createJsonRpcErrorResponse,
  createJsonRpcNotification,
  createJsonRpcRequest,
  createJsonRpcSuccessResponse,
  parseJson
};
//# sourceMappingURL=main.mjs.map
