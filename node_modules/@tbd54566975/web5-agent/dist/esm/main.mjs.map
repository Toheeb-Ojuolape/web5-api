{
  "version": 3,
  "sources": ["../../src/json-rpc.ts"],
  "sourcesContent": ["export type JsonRpcId = string | number | null;\nexport type JsonRpcParams = any;\nexport type JsonRpcVersion = '2.0';\n\nexport interface JsonRpcRequest {\n  jsonrpc: JsonRpcVersion;\n  id?: JsonRpcId;\n  method: string;\n  params?: any;\n}\n\nexport interface JsonRpcError {\n  code: JsonRpcErrorCodes;\n  message: string;\n  data?: any;\n}\n\nexport enum JsonRpcErrorCodes {\n  // JSON-RPC 2.0 pre-defined errors\n  InvalidRequest = -32600,\n  MethodNotFound = -32601,\n  InvalidParams = -32602,\n  InternalError = -32603,\n  ParseError = -32700,\n  TransportError = -32300,\n\n  // App defined errors\n  BadRequest = -50400, // equivalent to HTTP Status 400\n  Unauthorized = -50401, // equivalent to HTTP Status 401\n  Forbidden = -50403, // equivalent to HTTP Status 403\n}\n\nexport type JsonRpcResponse = JsonRpcSuccessResponse | JsonRpcErrorResponse;\n\nexport interface JsonRpcSuccessResponse {\n  jsonrpc: JsonRpcVersion;\n  id: JsonRpcId;\n  result: any;\n  error?: never;\n}\n\nexport interface JsonRpcErrorResponse {\n  jsonrpc: JsonRpcVersion;\n  id: JsonRpcId;\n  result?: never;\n  error: JsonRpcError;\n}\n\nexport const createJsonRpcErrorResponse = (\n  id: JsonRpcId,\n  code: JsonRpcErrorCodes,\n  message: string,\n  data?: any,\n): JsonRpcErrorResponse => {\n  const error: JsonRpcError = { code, message };\n  if (data != undefined) {\n    error.data = data;\n  }\n  return {\n    jsonrpc: '2.0',\n    id,\n    error,\n  };\n};\n\nexport const createJsonRpcNotification = (\n  method: string,\n  params?: JsonRpcParams,\n): JsonRpcRequest => {\n  return {\n    jsonrpc: '2.0',\n    method,\n    params,\n  };\n};\n\nexport const createJsonRpcRequest = (\n  id: JsonRpcId,\n  method: string,\n  params?: JsonRpcParams,\n): JsonRpcRequest => {\n  return {\n    jsonrpc: '2.0',\n    id,\n    method,\n    params,\n  };\n};\n\nexport const createJsonRpcSuccessResponse = (\n  id: JsonRpcId,\n  result?: any,\n): JsonRpcSuccessResponse => {\n  return {\n    jsonrpc : '2.0',\n    id,\n    result  : result ?? null,\n  };\n};\n\nexport function parseJson(text: string): object | null {\n  try {\n    return JSON.parse(text);\n  } catch {\n    return null;\n  }\n}"],
  "mappings": ";AAiBO,IAAK,oBAAL,kBAAKA,uBAAL;AAEL,EAAAA,sCAAA,oBAAiB,UAAjB;AACA,EAAAA,sCAAA,oBAAiB,UAAjB;AACA,EAAAA,sCAAA,mBAAgB,UAAhB;AACA,EAAAA,sCAAA,mBAAgB,UAAhB;AACA,EAAAA,sCAAA,gBAAa,UAAb;AACA,EAAAA,sCAAA,oBAAiB,UAAjB;AAGA,EAAAA,sCAAA,gBAAa,UAAb;AACA,EAAAA,sCAAA,kBAAe,UAAf;AACA,EAAAA,sCAAA,eAAY,UAAZ;AAZU,SAAAA;AAAA,GAAA;AA+BL,IAAM,6BAA6B,CACxC,IACA,MACA,SACA,SACyB;AACzB,QAAM,QAAsB,EAAE,MAAM,QAAQ;AAC5C,MAAI,QAAQ,QAAW;AACrB,UAAM,OAAO;AAAA,EACf;AACA,SAAO;AAAA,IACL,SAAS;AAAA,IACT;AAAA,IACA;AAAA,EACF;AACF;AAEO,IAAM,4BAA4B,CACvC,QACA,WACmB;AACnB,SAAO;AAAA,IACL,SAAS;AAAA,IACT;AAAA,IACA;AAAA,EACF;AACF;AAEO,IAAM,uBAAuB,CAClC,IACA,QACA,WACmB;AACnB,SAAO;AAAA,IACL,SAAS;AAAA,IACT;AAAA,IACA;AAAA,IACA;AAAA,EACF;AACF;AAEO,IAAM,+BAA+B,CAC1C,IACA,WAC2B;AAC3B,SAAO;AAAA,IACL,SAAU;AAAA,IACV;AAAA,IACA,QAAU,0BAAU;AAAA,EACtB;AACF;AAEO,SAAS,UAAU,MAA6B;AACrD,MAAI;AACF,WAAO,KAAK,MAAM,IAAI;AAAA,EACxB,SAAQ,GAAN;AACA,WAAO;AAAA,EACT;AACF;",
  "names": ["JsonRpcErrorCodes"]
}
