import type { Filter } from '../core/types.js';
import { createLevelDatabase, LevelWrapper } from './level-wrapper.js';
export declare type Entry = {
    [property: string]: unknown;
};
export interface IndexLevelOptions {
    signal?: AbortSignal;
}
/**
 * A LevelDB implementation for indexing the messages stored in the DWN.
 */
export declare class IndexLevel {
    config: IndexLevelConfig;
    db: LevelWrapper<string>;
    constructor(config: IndexLevelConfig);
    open(): Promise<void>;
    close(): Promise<void>;
    put(id: string, entry: Entry, options?: IndexLevelOptions): Promise<void>;
    query(filter: Filter, options?: IndexLevelOptions): Promise<Array<string>>;
    delete(id: string, options?: IndexLevelOptions): Promise<void>;
    clear(): Promise<void>;
    private findExactMatches;
    private findRangeMatches;
    private findMatches;
    private encodeValue;
    private join;
    dump(): Promise<void>;
}
declare type IndexLevelConfig = {
    location: string;
    createLevelDatabase?: typeof createLevelDatabase;
};
export {};
//# sourceMappingURL=index-level.d.ts.map