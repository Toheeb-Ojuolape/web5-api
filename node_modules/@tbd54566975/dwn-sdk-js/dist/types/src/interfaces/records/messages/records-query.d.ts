import type { SignatureInput } from '../../../jose/jws/general/types.js';
import type { Filter } from '../../../core/types.js';
import type { RecordsQueryFilter, RecordsQueryMessage } from '../types.js';
import { Message } from '../../../core/message.js';
export declare enum DateSort {
    CreatedAscending = "createdAscending",
    CreatedDescending = "createdDescending",
    PublishedAscending = "publishedAscending",
    PublishedDescending = "publishedDescending"
}
export declare type RecordsQueryOptions = {
    dateCreated?: string;
    filter: RecordsQueryFilter;
    dateSort?: DateSort;
    authorizationSignatureInput: SignatureInput;
};
export declare class RecordsQuery extends Message<RecordsQueryMessage> {
    static parse(message: RecordsQueryMessage): Promise<RecordsQuery>;
    static create(options: RecordsQueryOptions): Promise<RecordsQuery>;
    authorize(tenant: string): Promise<void>;
    static convertFilter(filter: RecordsQueryFilter): Filter;
    static normalizeFilter(filter: RecordsQueryFilter): RecordsQueryFilter;
}
//# sourceMappingURL=records-query.d.ts.map