import type { MessageStore } from '../../../store/message-store.js';
import type { RecordsWrite } from './records-write.js';
import type { SignatureInput } from '../../../jose/jws/general/types.js';
import type { RecordsReadMessage } from '../types.js';
import { Message } from '../../../core/message.js';
export declare type RecordsReadOptions = {
    recordId: string;
    date?: string;
    authorizationSignatureInput?: SignatureInput;
};
export declare class RecordsRead extends Message<RecordsReadMessage> {
    static parse(message: RecordsReadMessage): Promise<RecordsRead>;
    /**
     * Creates a RecordsRead message.
     * @param options.recordId If `undefined`, will be auto-filled as a originating message as convenience for developer.
     * @param options.date If `undefined`, it will be auto-filled with current time.
     */
    static create(options: RecordsReadOptions): Promise<RecordsRead>;
    authorize(tenant: string, newestRecordsWrite: RecordsWrite, messageStore: MessageStore): Promise<void>;
}
//# sourceMappingURL=records-read.d.ts.map