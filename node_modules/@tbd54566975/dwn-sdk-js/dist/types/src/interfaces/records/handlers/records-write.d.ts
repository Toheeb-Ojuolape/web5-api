/// <reference types="readable-stream" />
import type { EventLog } from '../../../event-log/event-log.js';
import type { MethodHandler } from '../../types.js';
import type { RecordsWriteMessage } from '../types.js';
import type { TimestampedMessage } from '../../../core/types.js';
import type { DataStore, DidResolver, MessageStore } from '../../../index.js';
import { MessageReply } from '../../../core/message-reply.js';
import { RecordsWrite } from '../messages/records-write.js';
export declare type RecordsWriteHandlerOptions = {
    skipDataStorage?: boolean;
};
export declare class RecordsWriteHandler implements MethodHandler {
    private didResolver;
    private messageStore;
    private dataStore;
    private eventLog;
    constructor(didResolver: DidResolver, messageStore: MessageStore, dataStore: DataStore, eventLog: EventLog);
    handle({ tenant, message, options, dataStream }: {
        tenant: string;
        message: RecordsWriteMessage;
        options?: RecordsWriteHandlerOptions;
        dataStream?: _Readable.Readable;
    }): Promise<MessageReply>;
    /**
     * Puts the given data in storage unless tenant already has that data for the given recordId
     *
     * @throws {DwnError} with `DwnErrorCode.RecordsWriteMissingDataStream`
     *                    if `dataStream` is absent AND the `dataCid` does not match the current data for the given recordId
     * @throws {DwnError} with `DwnErrorCode.RecordsWriteMissingData`
     *                    if `dataStream` is absent AND dataStore does not contain the given `dataCid`
     * @throws {DwnError} with `DwnErrorCode.RecordsWriteDataCidMismatch`
     *                    if the data stream resulted in a data CID that mismatches with `dataCid` in the given message
     * @throws {DwnError} with `DwnErrorCode.RecordsWriteDataSizeMismatch`
     *                    if `dataSize` in `descriptor` given mismatches the actual data size
     */
    putData(tenant: string, message: RecordsWriteMessage, dataStream?: _Readable.Readable, newestExistingMessage?: TimestampedMessage): Promise<void>;
}
export declare function constructRecordsWriteIndexes(recordsWrite: RecordsWrite, isLatestBaseState: boolean): Promise<Record<string, string>>;
//# sourceMappingURL=records-write.d.ts.map