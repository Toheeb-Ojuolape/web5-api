import type { BaseMessage } from '../../core/types.js';
import type { DwnInterfaceName, DwnMethodName } from '../../core/message.js';
export declare type ProtocolsConfigureDescriptor = {
    interface: DwnInterfaceName.Protocols;
    method: DwnMethodName.Configure;
    dateCreated: string;
    definition: ProtocolDefinition;
};
export declare type ProtocolDefinition = {
    protocol: string;
    types: ProtocolTypes;
    structure: {
        [key: string]: ProtocolRuleSet;
    };
};
export declare type ProtocolType = {
    schema?: string;
    dataFormats?: string[];
};
export declare type ProtocolTypes = {
    [key: string]: ProtocolType;
};
export declare enum ProtocolActor {
    Anyone = "anyone",
    Author = "author",
    Recipient = "recipient"
}
export declare enum ProtocolAction {
    Read = "read",
    Write = "write"
}
export declare type ProtocolActionRule = {
    who: string;
    of?: string;
    can: string;
};
export declare type ProtocolRuleSet = {
    $actions?: ProtocolActionRule[];
    [key: string]: any;
};
export declare type ProtocolsConfigureMessage = BaseMessage & {
    descriptor: ProtocolsConfigureDescriptor;
};
export declare type ProtocolsQueryFilter = {
    protocol: string;
};
export declare type ProtocolsQueryDescriptor = {
    interface: DwnInterfaceName.Protocols;
    method: DwnMethodName.Query;
    dateCreated: string;
    filter?: ProtocolsQueryFilter;
};
export declare type ProtocolsQueryMessage = BaseMessage & {
    descriptor: ProtocolsQueryDescriptor;
};
//# sourceMappingURL=types.d.ts.map