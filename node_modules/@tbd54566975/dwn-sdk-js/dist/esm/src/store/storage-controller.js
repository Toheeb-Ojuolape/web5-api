var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { DwnConstant } from '../core/dwn-constant.js';
import { Message } from '../core/message.js';
import { DataStream, Encoder } from '../index.js';
/**
 * A class that provides an abstraction for the usage of MessageStore, DataStore, and EventLog.
 */
export class StorageController {
    static query(messageStore, dataStore, tenant, filter) {
        return __awaiter(this, void 0, void 0, function* () {
            const messages = (yield messageStore.query(tenant, filter));
            // for every message, only include the data as `encodedData` if the data size is equal or smaller than the size threshold
            for (const message of messages) {
                const dataCid = message.descriptor.dataCid;
                const dataSize = message.descriptor.dataSize;
                if (dataCid !== undefined && dataSize <= DwnConstant.maxDataSizeAllowedToBeEncoded) {
                    const messageCid = yield Message.getCid(message);
                    const result = yield dataStore.get(tenant, messageCid, dataCid);
                    if (result) {
                        const dataBytes = yield DataStream.toBytes(result.dataStream);
                        message.encodedData = Encoder.bytesToBase64Url(dataBytes);
                    }
                }
            }
            return messages;
        });
    }
    static delete(messageStore, dataStore, tenant, message) {
        return __awaiter(this, void 0, void 0, function* () {
            const messageCid = yield Message.getCid(message);
            if (message.descriptor.dataCid !== undefined) {
                yield dataStore.delete(tenant, messageCid, message.descriptor.dataCid);
            }
            yield messageStore.delete(tenant, messageCid);
        });
    }
}
//# sourceMappingURL=storage-controller.js.map