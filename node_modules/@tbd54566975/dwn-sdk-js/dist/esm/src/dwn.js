var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { AllowAllTenantGate } from './core/tenant-gate.js';
import { DataStoreLevel } from './store/data-store-level.js';
import { DidResolver } from './did/did-resolver.js';
import { EventLogLevel } from './event-log/event-log-level.js';
import { EventsGetHandler } from './interfaces/events/handlers/events-get.js';
import { MessageReply } from './core/message-reply.js';
import { MessagesGetHandler } from './interfaces/messages/handlers/messages-get.js';
import { MessageStoreLevel } from './store/message-store-level.js';
import { ProtocolsConfigureHandler } from './interfaces/protocols/handlers/protocols-configure.js';
import { ProtocolsQueryHandler } from './interfaces/protocols/handlers/protocols-query.js';
import { RecordsDeleteHandler } from './interfaces/records/handlers/records-delete.js';
import { RecordsQueryHandler } from './interfaces/records/handlers/records-query.js';
import { RecordsReadHandler } from './interfaces/records/handlers/records-read.js';
import { RecordsWriteHandler } from './interfaces/records/handlers/records-write.js';
import { DwnInterfaceName, DwnMethodName, Message } from './core/message.js';
export class Dwn {
    constructor(config) {
        this.didResolver = config.didResolver;
        this.messageStore = config.messageStore;
        this.dataStore = config.dataStore;
        this.eventLog = config.eventLog;
        this.tenantGate = config.tenantGate;
        this.methodHandlers = {
            [DwnInterfaceName.Events + DwnMethodName.Get]: new EventsGetHandler(this.didResolver, this.eventLog),
            [DwnInterfaceName.Messages + DwnMethodName.Get]: new MessagesGetHandler(this.didResolver, this.messageStore, this.dataStore),
            [DwnInterfaceName.Protocols + DwnMethodName.Configure]: new ProtocolsConfigureHandler(this.didResolver, this.messageStore, this.dataStore, this.eventLog),
            [DwnInterfaceName.Protocols + DwnMethodName.Query]: new ProtocolsQueryHandler(this.didResolver, this.messageStore, this.dataStore),
            [DwnInterfaceName.Records + DwnMethodName.Delete]: new RecordsDeleteHandler(this.didResolver, this.messageStore, this.dataStore, this.eventLog),
            [DwnInterfaceName.Records + DwnMethodName.Query]: new RecordsQueryHandler(this.didResolver, this.messageStore, this.dataStore),
            [DwnInterfaceName.Records + DwnMethodName.Read]: new RecordsReadHandler(this.didResolver, this.messageStore, this.dataStore),
            [DwnInterfaceName.Records + DwnMethodName.Write]: new RecordsWriteHandler(this.didResolver, this.messageStore, this.dataStore, this.eventLog),
        };
    }
    /**
     * Creates an instance of the DWN.
     */
    static create(config) {
        var _a, _b, _c, _d, _e;
        return __awaiter(this, void 0, void 0, function* () {
            config !== null && config !== void 0 ? config : (config = {});
            (_a = config.didResolver) !== null && _a !== void 0 ? _a : (config.didResolver = new DidResolver());
            (_b = config.tenantGate) !== null && _b !== void 0 ? _b : (config.tenantGate = new AllowAllTenantGate());
            (_c = config.messageStore) !== null && _c !== void 0 ? _c : (config.messageStore = new MessageStoreLevel());
            (_d = config.dataStore) !== null && _d !== void 0 ? _d : (config.dataStore = new DataStoreLevel());
            (_e = config.eventLog) !== null && _e !== void 0 ? _e : (config.eventLog = new EventLogLevel());
            const dwn = new Dwn(config);
            yield dwn.open();
            return dwn;
        });
    }
    open() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.messageStore.open();
            yield this.dataStore.open();
            yield this.eventLog.open();
        });
    }
    close() {
        return __awaiter(this, void 0, void 0, function* () {
            this.messageStore.close();
            this.dataStore.close();
            this.eventLog.close();
        });
    }
    /**
     * Processes the given DWN message and returns with a reply.
     * @param tenant The tenant DID to route the given message to.
     */
    processMessage(tenant, rawMessage, dataStream) {
        return __awaiter(this, void 0, void 0, function* () {
            const errorMessageReply = yield this.preprocessingChecks(tenant, rawMessage);
            if (errorMessageReply !== undefined) {
                return errorMessageReply;
            }
            const handlerKey = rawMessage.descriptor.interface + rawMessage.descriptor.method;
            const methodHandlerReply = yield this.methodHandlers[handlerKey].handle({
                tenant,
                message: rawMessage,
                dataStream
            });
            return methodHandlerReply;
        });
    }
    /**
     * Handles a `RecordsRead` message.
     */
    handleRecordsRead(tenant, message) {
        return __awaiter(this, void 0, void 0, function* () {
            const errorMessageReply = yield this.preprocessingChecks(tenant, message, DwnInterfaceName.Records, DwnMethodName.Read);
            if (errorMessageReply !== undefined) {
                return errorMessageReply;
            }
            const handler = new RecordsReadHandler(this.didResolver, this.messageStore, this.dataStore);
            return handler.handle({ tenant, message });
        });
    }
    /**
     * Handles a `MessagesGet` message.
     */
    handleMessagesGet(tenant, message) {
        return __awaiter(this, void 0, void 0, function* () {
            const errorMessageReply = yield this.preprocessingChecks(tenant, message, DwnInterfaceName.Messages, DwnMethodName.Get);
            if (errorMessageReply !== undefined) {
                return errorMessageReply;
            }
            const handler = new MessagesGetHandler(this.didResolver, this.messageStore, this.dataStore);
            return handler.handle({ tenant, message });
        });
    }
    /**
     * Privileged method for writing a pruned initial `RecordsWrite` to a DWN without needing to supply associated data.
     */
    synchronizePrunedInitialRecordsWrite(tenant, message) {
        return __awaiter(this, void 0, void 0, function* () {
            const errorMessageReply = yield this.preprocessingChecks(tenant, message, DwnInterfaceName.Records, DwnMethodName.Write);
            if (errorMessageReply !== undefined) {
                return errorMessageReply;
            }
            const options = {
                skipDataStorage: true,
            };
            const handler = new RecordsWriteHandler(this.didResolver, this.messageStore, this.dataStore, this.eventLog);
            const methodHandlerReply = yield handler.handle({ tenant, message, options });
            return methodHandlerReply;
        });
    }
    /**
     * Common checks for handlers.
     */
    preprocessingChecks(tenant, rawMessage, expectedInterface, expectedMethod) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            const isTenant = yield this.tenantGate.isTenant(tenant);
            if (!isTenant) {
                return new MessageReply({
                    status: { code: 401, detail: `${tenant} is not a tenant` }
                });
            }
            // Verify interface and method
            const dwnInterface = (_a = rawMessage === null || rawMessage === void 0 ? void 0 : rawMessage.descriptor) === null || _a === void 0 ? void 0 : _a.interface;
            const dwnMethod = (_b = rawMessage === null || rawMessage === void 0 ? void 0 : rawMessage.descriptor) === null || _b === void 0 ? void 0 : _b.method;
            if (dwnInterface === undefined || dwnMethod === undefined) {
                return new MessageReply({
                    status: { code: 400, detail: `Both interface and method must be present, interface: ${dwnInterface}, method: ${dwnMethod}` }
                });
            }
            if (expectedInterface !== undefined && expectedInterface !== dwnInterface) {
                return new MessageReply({
                    status: { code: 400, detail: `Expected interface ${expectedInterface}, received ${dwnInterface}` }
                });
            }
            if (expectedMethod !== undefined && expectedMethod !== dwnMethod) {
                return new MessageReply({
                    status: { code: 400, detail: `Expected method ${expectedInterface}${expectedMethod}, received ${dwnInterface}${dwnMethod}` }
                });
            }
            // validate message structure
            try {
                // consider to push this down to individual handlers
                Message.validateJsonSchema(rawMessage);
            }
            catch (error) {
                return MessageReply.fromError(error, 400);
            }
            return undefined;
        });
    }
    dump() {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        return __awaiter(this, void 0, void 0, function* () {
            console.group('didResolver');
            yield ((_b = (_a = this.didResolver)['dump']) === null || _b === void 0 ? void 0 : _b.call(_a));
            console.groupEnd();
            console.group('messageStore');
            // @ts-ignore
            yield ((_d = (_c = this.messageStore)['dump']) === null || _d === void 0 ? void 0 : _d.call(_c));
            console.groupEnd();
            console.group('dataStore');
            // @ts-ignore
            yield ((_f = (_e = this.dataStore)['dump']) === null || _f === void 0 ? void 0 : _f.call(_e));
            console.groupEnd();
            console.group('eventLog');
            yield ((_h = (_g = this.eventLog)['dump']) === null || _h === void 0 ? void 0 : _h.call(_g));
            console.groupEnd();
        });
    }
}
;
//# sourceMappingURL=dwn.js.map