var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { canonicalAuth } from '../../../core/auth.js';
import { MessageReply } from '../../../core/message-reply.js';
import { ProtocolsQuery } from '../messages/protocols-query.js';
import { removeUndefinedProperties } from '../../../utils/object.js';
import { DwnInterfaceName, DwnMethodName } from '../../../core/message.js';
export class ProtocolsQueryHandler {
    constructor(didResolver, messageStore, dataStore) {
        this.didResolver = didResolver;
        this.messageStore = messageStore;
        this.dataStore = dataStore;
    }
    handle({ tenant, message }) {
        return __awaiter(this, void 0, void 0, function* () {
            let protocolsQuery;
            try {
                protocolsQuery = yield ProtocolsQuery.parse(message);
            }
            catch (e) {
                return MessageReply.fromError(e, 400);
            }
            try {
                yield canonicalAuth(tenant, protocolsQuery, this.didResolver);
            }
            catch (e) {
                return MessageReply.fromError(e, 401);
            }
            const query = Object.assign({ interface: DwnInterfaceName.Protocols, method: DwnMethodName.Configure }, message.descriptor.filter);
            removeUndefinedProperties(query);
            const messages = yield this.messageStore.query(tenant, query);
            // strip away `authorization` property for each record before responding
            const entries = [];
            for (const message of messages) {
                const { authorization: _ } = message, objectWithRemainingProperties = __rest(message, ["authorization"]); // a trick to stripping away `authorization`
                entries.push(objectWithRemainingProperties);
            }
            return new MessageReply({
                status: { code: 200, detail: 'OK' },
                entries
            });
        });
    }
    ;
}
//# sourceMappingURL=protocols-query.js.map