var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { getCurrentTimeInHighPrecision } from '../../../utils/time.js';
import { removeUndefinedProperties } from '../../../utils/object.js';
import { validateAuthorizationIntegrity } from '../../../core/auth.js';
import { DwnInterfaceName, DwnMethodName, Message } from '../../../core/message.js';
import { normalizeProtocolUrl, validateProtocolUrlNormalized } from '../../../utils/url.js';
export class ProtocolsQuery extends Message {
    static parse(message) {
        return __awaiter(this, void 0, void 0, function* () {
            yield validateAuthorizationIntegrity(message);
            if (message.descriptor.filter !== undefined) {
                validateProtocolUrlNormalized(message.descriptor.filter.protocol);
            }
            return new ProtocolsQuery(message);
        });
    }
    static create(options) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const descriptor = {
                interface: DwnInterfaceName.Protocols,
                method: DwnMethodName.Query,
                dateCreated: (_a = options.dateCreated) !== null && _a !== void 0 ? _a : getCurrentTimeInHighPrecision(),
                filter: ProtocolsQuery.normalizeFilter(options.filter),
            };
            // delete all descriptor properties that are `undefined` else the code will encounter the following IPLD issue when attempting to generate CID:
            // Error: `undefined` is not supported by the IPLD Data Model and cannot be encoded
            removeUndefinedProperties(descriptor);
            const authorization = yield Message.signAsAuthorization(descriptor, options.authorizationSignatureInput);
            const message = { descriptor, authorization };
            Message.validateJsonSchema(message);
            const protocolsQuery = new ProtocolsQuery(message);
            return protocolsQuery;
        });
    }
    static normalizeFilter(filter) {
        if (filter === undefined) {
            return undefined;
        }
        return Object.assign(Object.assign({}, filter), { protocol: normalizeProtocolUrl(filter.protocol) });
    }
}
//# sourceMappingURL=protocols-query.js.map