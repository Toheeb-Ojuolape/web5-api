var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { getCurrentTimeInHighPrecision } from '../../../utils/time.js';
import { v4 as uuidv4 } from 'uuid';
import { validateAuthorizationIntegrity } from '../../../core/auth.js';
import { DwnInterfaceName, DwnMethodName, Message } from '../../../core/message.js';
export class PermissionsRequest extends Message {
    static parse(message) {
        return __awaiter(this, void 0, void 0, function* () {
            yield validateAuthorizationIntegrity(message);
            return new PermissionsRequest(message);
        });
    }
    static create(options) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const { conditions } = options;
            const providedConditions = conditions ? conditions : {};
            const mergedConditions = Object.assign(Object.assign({}, DEFAULT_CONDITIONS), providedConditions);
            const descriptor = {
                interface: DwnInterfaceName.Permissions,
                method: DwnMethodName.Request,
                dateCreated: (_a = options.dateCreated) !== null && _a !== void 0 ? _a : getCurrentTimeInHighPrecision(),
                conditions: mergedConditions,
                description: options.description,
                grantedTo: options.grantedTo,
                grantedBy: options.grantedBy,
                objectId: options.objectId ? options.objectId : uuidv4(),
                scope: options.scope,
            };
            const auth = yield Message.signAsAuthorization(descriptor, options.authorizationSignatureInput);
            const message = { descriptor, authorization: auth };
            Message.validateJsonSchema(message);
            return new PermissionsRequest(message);
        });
    }
    get id() {
        return this.message.descriptor.objectId;
    }
    get conditions() {
        return this.message.descriptor.conditions;
    }
    get grantedBy() {
        return this.message.descriptor.grantedBy;
    }
    get grantedTo() {
        return this.message.descriptor.grantedTo;
    }
    get description() {
        return this.message.descriptor.description;
    }
    get scope() {
        return this.message.descriptor.scope;
    }
}
export const DEFAULT_CONDITIONS = {
    attestation: 'optional',
    delegation: false,
    encryption: 'optional',
    publication: false,
    sharedAccess: false
};
//# sourceMappingURL=permissions-request.js.map