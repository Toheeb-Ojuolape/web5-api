"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Message = exports.DwnMethodName = exports.DwnInterfaceName = void 0;
var cid_js_1 = require("../utils/cid.js");
var signer_js_1 = require("../jose/jws/general/signer.js");
var jws_js_1 = require("../utils/jws.js");
var string_js_1 = require("../utils/string.js");
var schema_validator_js_1 = require("../schema-validator.js");
var DwnInterfaceName;
(function (DwnInterfaceName) {
    DwnInterfaceName["Events"] = "Events";
    DwnInterfaceName["Hooks"] = "Hooks";
    DwnInterfaceName["Messages"] = "Messages";
    DwnInterfaceName["Permissions"] = "Permissions";
    DwnInterfaceName["Protocols"] = "Protocols";
    DwnInterfaceName["Records"] = "Records";
})(DwnInterfaceName = exports.DwnInterfaceName || (exports.DwnInterfaceName = {}));
var DwnMethodName;
(function (DwnMethodName) {
    DwnMethodName["Configure"] = "Configure";
    DwnMethodName["Get"] = "Get";
    DwnMethodName["Grant"] = "Grant";
    DwnMethodName["Query"] = "Query";
    DwnMethodName["Read"] = "Read";
    DwnMethodName["Request"] = "Request";
    DwnMethodName["Write"] = "Write";
    DwnMethodName["Delete"] = "Delete";
})(DwnMethodName = exports.DwnMethodName || (exports.DwnMethodName = {}));
var Message = /** @class */ (function () {
    function Message(message) {
        this.message = message;
        if (message.authorization !== undefined) {
            this.authorizationPayload = jws_js_1.Jws.decodePlainObjectPayload(message.authorization);
            this.author = Message.getAuthor(message);
        }
    }
    /**
     * Called by `JSON.stringify(...)` automatically.
     */
    Message.prototype.toJSON = function () {
        return this.message;
    };
    /**
     * Validates the given message against the corresponding JSON schema.
     * @throws {Error} if fails validation.
     */
    Message.validateJsonSchema = function (rawMessage) {
        var dwnInterface = rawMessage.descriptor.interface;
        var dwnMethod = rawMessage.descriptor.method;
        var schemaLookupKey = dwnInterface + dwnMethod;
        // throws an error if message is invalid
        (0, schema_validator_js_1.validateJsonSchema)(schemaLookupKey, rawMessage);
    };
    ;
    /**
     * Gets the DID of the author of the given message, returned `undefined` if message is not signed.
     */
    Message.getAuthor = function (message) {
        if (message.authorization === undefined) {
            return undefined;
        }
        var author = jws_js_1.Jws.getSignerDid(message.authorization.signatures[0]);
        return author;
    };
    /**
     * Gets the CID of the given message.
     */
    Message.getCid = function (message) {
        return __awaiter(this, void 0, void 0, function () {
            var cid;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, (0, cid_js_1.computeCid)(message)];
                    case 1:
                        cid = _a.sent();
                        return [2 /*return*/, cid];
                }
            });
        });
    };
    /**
     * Compares message CID in lexicographical order according to the spec.
     * @returns 1 if `a` is larger than `b`; -1 if `a` is smaller/older than `b`; 0 otherwise (same message)
     */
    Message.compareCid = function (a, b) {
        return __awaiter(this, void 0, void 0, function () {
            var cidA, cidB;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, Message.getCid(a)];
                    case 1:
                        cidA = _a.sent();
                        return [4 /*yield*/, Message.getCid(b)];
                    case 2:
                        cidB = _a.sent();
                        return [2 /*return*/, (0, string_js_1.lexicographicalCompare)(cidA, cidB)];
                }
            });
        });
    };
    /**
     * Compares the CID of two messages.
     * @returns `true` if `a` is newer than `b`; `false` otherwise
     */
    Message.isCidLarger = function (a, b) {
        return __awaiter(this, void 0, void 0, function () {
            var aIsLarger;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, Message.compareCid(a, b)];
                    case 1:
                        aIsLarger = ((_a.sent()) > 0);
                        return [2 /*return*/, aIsLarger];
                }
            });
        });
    };
    /**
     * @returns message with the largest CID in the array using lexicographical compare. `undefined` if given array is empty.
     */
    Message.getMessageWithLargestCid = function (messages) {
        return __awaiter(this, void 0, void 0, function () {
            var currentNewestMessage, messages_1, messages_1_1, message, _a, e_1_1;
            var e_1, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        currentNewestMessage = undefined;
                        _c.label = 1;
                    case 1:
                        _c.trys.push([1, 7, 8, 9]);
                        messages_1 = __values(messages), messages_1_1 = messages_1.next();
                        _c.label = 2;
                    case 2:
                        if (!!messages_1_1.done) return [3 /*break*/, 6];
                        message = messages_1_1.value;
                        _a = currentNewestMessage === undefined;
                        if (_a) return [3 /*break*/, 4];
                        return [4 /*yield*/, Message.isCidLarger(message, currentNewestMessage)];
                    case 3:
                        _a = (_c.sent());
                        _c.label = 4;
                    case 4:
                        if (_a) {
                            currentNewestMessage = message;
                        }
                        _c.label = 5;
                    case 5:
                        messages_1_1 = messages_1.next();
                        return [3 /*break*/, 2];
                    case 6: return [3 /*break*/, 9];
                    case 7:
                        e_1_1 = _c.sent();
                        e_1 = { error: e_1_1 };
                        return [3 /*break*/, 9];
                    case 8:
                        try {
                            if (messages_1_1 && !messages_1_1.done && (_b = messages_1.return)) _b.call(messages_1);
                        }
                        finally { if (e_1) throw e_1.error; }
                        return [7 /*endfinally*/];
                    case 9: return [2 /*return*/, currentNewestMessage];
                }
            });
        });
    };
    /**
     * Signs over the CID of provided `descriptor`. The output is used as an `authorization` property.
     * @param signatureInput - the signature material to use (e.g. key and header data)
     * @returns General JWS signature used as an `authorization` property.
     */
    Message.signAsAuthorization = function (descriptor, signatureInput) {
        return __awaiter(this, void 0, void 0, function () {
            var descriptorCid, authPayload, authPayloadStr, authPayloadBytes, signer;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, (0, cid_js_1.computeCid)(descriptor)];
                    case 1:
                        descriptorCid = _a.sent();
                        authPayload = { descriptorCid: descriptorCid };
                        authPayloadStr = JSON.stringify(authPayload);
                        authPayloadBytes = new TextEncoder().encode(authPayloadStr);
                        return [4 /*yield*/, signer_js_1.GeneralJwsSigner.create(authPayloadBytes, [signatureInput])];
                    case 2:
                        signer = _a.sent();
                        return [2 /*return*/, signer.getJws()];
                }
            });
        });
    };
    /**
     * @returns newest message in the array. `undefined` if given array is empty.
     */
    Message.getNewestMessage = function (messages) {
        return __awaiter(this, void 0, void 0, function () {
            var currentNewestMessage, messages_2, messages_2_1, message, _a, e_2_1;
            var e_2, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        currentNewestMessage = undefined;
                        _c.label = 1;
                    case 1:
                        _c.trys.push([1, 7, 8, 9]);
                        messages_2 = __values(messages), messages_2_1 = messages_2.next();
                        _c.label = 2;
                    case 2:
                        if (!!messages_2_1.done) return [3 /*break*/, 6];
                        message = messages_2_1.value;
                        _a = currentNewestMessage === undefined;
                        if (_a) return [3 /*break*/, 4];
                        return [4 /*yield*/, Message.isNewer(message, currentNewestMessage)];
                    case 3:
                        _a = (_c.sent());
                        _c.label = 4;
                    case 4:
                        if (_a) {
                            currentNewestMessage = message;
                        }
                        _c.label = 5;
                    case 5:
                        messages_2_1 = messages_2.next();
                        return [3 /*break*/, 2];
                    case 6: return [3 /*break*/, 9];
                    case 7:
                        e_2_1 = _c.sent();
                        e_2 = { error: e_2_1 };
                        return [3 /*break*/, 9];
                    case 8:
                        try {
                            if (messages_2_1 && !messages_2_1.done && (_b = messages_2.return)) _b.call(messages_2);
                        }
                        finally { if (e_2) throw e_2.error; }
                        return [7 /*endfinally*/];
                    case 9: return [2 /*return*/, currentNewestMessage];
                }
            });
        });
    };
    /**
     * Checks if first message is newer than second message.
     * @returns `true` if `a` is newer than `b`; `false` otherwise
     */
    Message.isNewer = function (a, b) {
        return __awaiter(this, void 0, void 0, function () {
            var aIsNewer;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, Message.compareModifiedTime(a, b)];
                    case 1:
                        aIsNewer = ((_a.sent()) > 0);
                        return [2 /*return*/, aIsNewer];
                }
            });
        });
    };
    /**
     * Checks if first message is older than second message.
     * @returns `true` if `a` is older than `b`; `false` otherwise
     */
    Message.isOlder = function (a, b) {
        return __awaiter(this, void 0, void 0, function () {
            var aIsNewer;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, Message.compareModifiedTime(a, b)];
                    case 1:
                        aIsNewer = ((_a.sent()) < 0);
                        return [2 /*return*/, aIsNewer];
                }
            });
        });
    };
    /**
     * Compares the `dateModified` of the given messages with a fallback to message CID according to the spec.
     * @returns 1 if `a` is larger/newer than `b`; -1 if `a` is smaller/older than `b`; 0 otherwise (same age)
     */
    Message.compareModifiedTime = function (a, b) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (a.descriptor.dateModified > b.descriptor.dateModified) {
                    return [2 /*return*/, 1];
                }
                else if (a.descriptor.dateModified < b.descriptor.dateModified) {
                    return [2 /*return*/, -1];
                }
                // else `dateModified` is the same between a and b
                // compare the `dataCid` instead, the < and > operators compare strings in lexicographical order
                return [2 /*return*/, Message.compareCid(a, b)];
            });
        });
    };
    return Message;
}());
exports.Message = Message;
//# sourceMappingURL=message.js.map