"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.authorize = exports.authenticate = exports.validateAuthorizationIntegrity = exports.canonicalAuth = void 0;
var verifier_js_1 = require("../jose/jws/general/verifier.js");
var jws_js_1 = require("../utils/jws.js");
var cid_js_1 = require("../utils/cid.js");
var dwn_error_js_1 = require("./dwn-error.js");
/**
 * Authenticates then authorizes the given message using the "canonical" auth flow.
 * Some message auth require special handling such as `RecordsWrite` and `RecordsQuery`,
 * which would be incompatible with this auth flow.
 * @throws {Error} if auth fails
 */
function canonicalAuth(tenant, incomingMessage, didResolver) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, authenticate(incomingMessage.message.authorization, didResolver)];
                case 1:
                    _a.sent();
                    return [4 /*yield*/, authorize(tenant, incomingMessage)];
                case 2:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    });
}
exports.canonicalAuth = canonicalAuth;
/**
 * Validates the structural integrity of the `authorization` property.
 * NOTE: signature is not verified.
 * @returns the parsed JSON payload object if validation succeeds.
 */
function validateAuthorizationIntegrity(message, authorizationPayloadConstraints) {
    var _a;
    return __awaiter(this, void 0, void 0, function () {
        var payloadJson, descriptorCid, expectedDescriptorCid, allowedProperties, customProperties, propertyName;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    if (message.authorization === undefined) {
                        throw new dwn_error_js_1.DwnError(dwn_error_js_1.DwnErrorCode.AuthorizationMissing, 'Property `authorization` is missing.');
                    }
                    if (message.authorization.signatures.length !== 1) {
                        throw new Error('expected no more than 1 signature for authorization');
                    }
                    payloadJson = jws_js_1.Jws.decodePlainObjectPayload(message.authorization);
                    descriptorCid = payloadJson.descriptorCid;
                    return [4 /*yield*/, (0, cid_js_1.computeCid)(message.descriptor)];
                case 1:
                    expectedDescriptorCid = _b.sent();
                    if (descriptorCid !== expectedDescriptorCid) {
                        throw new Error("provided descriptorCid ".concat(descriptorCid, " does not match expected CID ").concat(expectedDescriptorCid));
                    }
                    allowedProperties = (_a = authorizationPayloadConstraints === null || authorizationPayloadConstraints === void 0 ? void 0 : authorizationPayloadConstraints.allowedProperties) !== null && _a !== void 0 ? _a : new Set();
                    customProperties = __assign({}, payloadJson);
                    delete customProperties.descriptorCid;
                    for (propertyName in customProperties) {
                        {
                            if (!allowedProperties.has(propertyName)) {
                                throw new Error("".concat(propertyName, " not allowed in auth payload."));
                            }
                        }
                        try {
                            (0, cid_js_1.parseCid)(payloadJson[propertyName]);
                        }
                        catch (e) {
                            throw new Error("".concat(propertyName, " must be a valid CID"));
                        }
                    }
                    return [2 /*return*/, payloadJson];
            }
        });
    });
}
exports.validateAuthorizationIntegrity = validateAuthorizationIntegrity;
/**
 * Validates the signature(s) of the given JWS.
 * @throws {Error} if fails authentication
 */
function authenticate(jws, didResolver) {
    return __awaiter(this, void 0, void 0, function () {
        var verifier;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (jws === undefined) {
                        throw new dwn_error_js_1.DwnError(dwn_error_js_1.DwnErrorCode.AuthenticateJwsMissing, 'Missing JWS.');
                    }
                    verifier = new verifier_js_1.GeneralJwsVerifier(jws);
                    return [4 /*yield*/, verifier.verify(didResolver)];
                case 1:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    });
}
exports.authenticate = authenticate;
/**
 * Authorizes the incoming message.
 * @throws {Error} if fails authentication
 */
function authorize(tenant, incomingMessage) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            // if author is the same as the target tenant, we can directly grant access
            if (incomingMessage.author === tenant) {
                return [2 /*return*/];
            }
            else {
                throw new Error('message failed authorization, permission grant check not yet implemented');
            }
            return [2 /*return*/];
        });
    });
}
exports.authorize = authorize;
//# sourceMappingURL=auth.js.map