"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DidKeyResolver = void 0;
var varint_1 = __importDefault(require("varint"));
var base58_1 = require("multiformats/bases/base58");
var did_js_1 = require("./did.js");
var ed25519_js_1 = require("../../src/jose/algorithms/signing/ed25519.js");
var encoder_js_1 = require("../utils/encoder.js");
var secp256k1_js_1 = require("../utils/secp256k1.js");
/**
 * did:key Resolver.
 * * **NOTE**: Key support is limited to Ed25519 and SECP256k1.
 * * **NOTE**: `verificationMethod` support is limited to `JsonWebKey2020`
 *
 * Helpful Resources:
 * * [DID-Key Draft Spec](https://w3c-ccg.github.io/did-method-key/)
 */
var DidKeyResolver = /** @class */ (function () {
    function DidKeyResolver() {
    }
    DidKeyResolver.prototype.method = function () {
        return 'key';
    };
    /**
     * Gets the number of bytes of the multicodec header in the `did:key` DID.
     * @param did - A `did:key` DID
     * @returns size of the multicodec head in number of bytes
     */
    DidKeyResolver.getMulticodecSize = function (did) {
        var multicodecHeaderSize = 0;
        while (true) {
            var currentByte = did[multicodecHeaderSize];
            multicodecHeaderSize++;
            // bitwise and with binary 1000 0000
            // as soon as the result byte does not lead with a leading 1, we've reached the end of the multicodec header
            if ((currentByte & 0x80) !== 0x80) {
                break;
            }
        }
        return multicodecHeaderSize;
    };
    DidKeyResolver.prototype.resolve = function (did) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, _scheme, _method, id, idBytes, multicodec, multicodecSize, publicKeyBytes, keySpecificContext, publicJwk, keyId, didDocument, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        _a = __read(did.split(':', 3), 3), _scheme = _a[0], _method = _a[1], id = _a[2];
                        _c.label = 1;
                    case 1:
                        _c.trys.push([1, 7, , 8]);
                        idBytes = base58_1.base58btc.decode(id);
                        multicodec = varint_1.default.decode(idBytes);
                        multicodecSize = DidKeyResolver.getMulticodecSize(idBytes);
                        publicKeyBytes = idBytes.slice(multicodecSize);
                        keySpecificContext = [];
                        publicJwk = void 0;
                        if (!(multicodec === 0xed)) return [3 /*break*/, 3];
                        // ed25519-pub multicodec
                        keySpecificContext.push('https://w3id.org/security/suites/ed25519-2020/v1');
                        return [4 /*yield*/, ed25519_js_1.ed25519.publicKeyToJwk(publicKeyBytes)];
                    case 2:
                        publicJwk = _c.sent();
                        return [3 /*break*/, 6];
                    case 3:
                        if (!(multicodec === 0xe7)) return [3 /*break*/, 5];
                        return [4 /*yield*/, secp256k1_js_1.Secp256k1.publicKeyToJwk(publicKeyBytes)];
                    case 4:
                        // secp256k1-pub multicodec
                        publicJwk = _c.sent();
                        return [3 /*break*/, 6];
                    case 5: throw Error("key type of multicodec ".concat(multicodec, " is not supported"));
                    case 6:
                        keyId = "".concat(did, "#").concat(id);
                        didDocument = {
                            '@context': __spreadArray([
                                'https://www.w3.org/ns/did/v1',
                                'https://w3id.org/security/suites/jws-2020/v1'
                            ], __read(keySpecificContext), false),
                            'id': did,
                            'verificationMethod': [{
                                    id: keyId,
                                    type: 'JsonWebKey2020',
                                    controller: did,
                                    publicKeyJwk: publicJwk
                                }],
                            'authentication': [keyId],
                            'assertionMethod': [keyId],
                            'capabilityDelegation': [keyId],
                            'capabilityInvocation': [keyId]
                        };
                        return [2 /*return*/, {
                                '@context': 'https://w3id.org/did-resolution/v1',
                                didDocument: didDocument,
                                didDocumentMetadata: {},
                                didResolutionMetadata: {}
                            }];
                    case 7:
                        _b = _c.sent();
                        return [2 /*return*/, {
                                didDocument: undefined,
                                didDocumentMetadata: {},
                                didResolutionMetadata: {
                                    error: 'invalidDid'
                                },
                            }];
                    case 8: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Generates a new ed25519 public/private key pair. Creates a DID using the private key.
     * @returns DID and its key material.
     */
    DidKeyResolver.generate = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a, publicJwk, privateJwk, ed25519Multicodec, publicKeyBytes, idBytes, id, did, keyId;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, ed25519_js_1.ed25519.generateKeyPair()];
                    case 1:
                        _a = _b.sent(), publicJwk = _a.publicJwk, privateJwk = _a.privateJwk;
                        ed25519Multicodec = varint_1.default.encode(0xed);
                        publicKeyBytes = encoder_js_1.Encoder.base64UrlToBytes(publicJwk.x);
                        idBytes = new Uint8Array(ed25519Multicodec.length + publicKeyBytes.byteLength);
                        idBytes.set(ed25519Multicodec, 0);
                        idBytes.set(publicKeyBytes, ed25519Multicodec.length);
                        id = base58_1.base58btc.encode(idBytes);
                        did = "did:key:".concat(id);
                        keyId = DidKeyResolver.getKeyId(did);
                        return [2 /*return*/, { did: did, keyId: keyId, keyPair: { publicJwk: publicJwk, privateJwk: privateJwk } }];
                }
            });
        });
    };
    /**
     * Gets the fully qualified key ID of a `did:key` DID. ie. '<did>#<method-specific-id>'
     */
    DidKeyResolver.getKeyId = function (did) {
        var methodSpecificId = did_js_1.Did.getMethodSpecificId(did);
        var keyId = "".concat(did, "#").concat(methodSpecificId);
        return keyId;
    };
    ;
    DidKeyResolver.prototype.dump = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/];
            });
        });
    };
    return DidKeyResolver;
}());
exports.DidKeyResolver = DidKeyResolver;
//# sourceMappingURL=did-key-resolver.js.map