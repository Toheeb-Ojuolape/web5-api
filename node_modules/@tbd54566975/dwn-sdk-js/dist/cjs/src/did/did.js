"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Did = void 0;
/**
 * DID related operations.
 */
var Did = /** @class */ (function () {
    function Did() {
    }
    /**
     * Gets the method specific ID segment of a DID. ie. did:<method-name>:<method-specific-id>
     */
    Did.getMethodSpecificId = function (did) {
        var secondColonIndex = did.indexOf(':', 4); // start search for : from the method portion
        var methodSpecificId = did.substring(secondColonIndex + 1);
        return methodSpecificId;
    };
    /**
     * @param did - the DID to validate
     */
    Did.validate = function (did) {
        if (typeof did !== 'string') {
            throw new Error("DID is not string: ".concat(did));
        }
        // eslint-disable-next-line
        var didRegex = /^did:([a-z0-9]+):((?:(?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))*:)*((?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))+))((;[a-zA-Z0-9_.:%-]+=[a-zA-Z0-9_.:%-]*)*)(\/[^#?]*)?([?][^#]*)?(#.*)?$/;
        if (!didRegex.test(did)) {
            throw new TypeError("DID is not a valid DID: ".concat(did));
        }
    };
    /**
     * Gets the method name from a DID. ie. did:<method-name>:<method-specific-id>
     */
    Did.getMethodName = function (did) {
        var secondColonIndex = did.indexOf(':', 4); // start search for : from the method portion
        var methodName = did.substring(4, secondColonIndex);
        return methodName;
    };
    return Did;
}());
exports.Did = Did;
//# sourceMappingURL=did.js.map