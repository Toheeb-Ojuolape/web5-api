"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IndexLevel = void 0;
var object_js_1 = require("../utils/object.js");
var level_wrapper_js_1 = require("./level-wrapper.js");
/**
 * A LevelDB implementation for indexing the messages stored in the DWN.
 */
var IndexLevel = /** @class */ (function () {
    function IndexLevel(config) {
        this.config = __assign({ createLevelDatabase: level_wrapper_js_1.createLevelDatabase }, config);
        this.db = new level_wrapper_js_1.LevelWrapper(__assign(__assign({}, this.config), { valueEncoding: 'utf8' }));
    }
    IndexLevel.prototype.open = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.db.open()];
            });
        });
    };
    IndexLevel.prototype.close = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.db.close()];
            });
        });
    };
    IndexLevel.prototype.put = function (id, entry, options) {
        return __awaiter(this, void 0, void 0, function () {
            var ops, prefixes, property, value, prefix;
            return __generator(this, function (_a) {
                entry = (0, object_js_1.flatten)(entry);
                ops = [];
                prefixes = [];
                for (property in entry) {
                    value = entry[property];
                    prefix = this.join(property, this.encodeValue(value));
                    ops.push({ type: 'put', key: this.join(prefix, id), value: id });
                    prefixes.push(prefix);
                }
                ops.push({ type: 'put', key: "__".concat(id, "__prefixes"), value: JSON.stringify(prefixes) });
                return [2 /*return*/, this.db.batch(ops, options)];
            });
        });
    };
    IndexLevel.prototype.query = function (filter, options) {
        return __awaiter(this, void 0, void 0, function () {
            function checkMatches(property, promise) {
                var _a;
                return __awaiter(this, void 0, void 0, function () {
                    var _b, _c, _d, _1, id, e_2_1;
                    var e_2, _e;
                    return __generator(this, function (_f) {
                        switch (_f.label) {
                            case 0:
                                promises.push(promise);
                                _f.label = 1;
                            case 1:
                                _f.trys.push([1, 6, 7, 8]);
                                return [4 /*yield*/, promise];
                            case 2:
                                _b = __values.apply(void 0, [_f.sent()]), _c = _b.next();
                                _f.label = 3;
                            case 3:
                                if (!!_c.done) return [3 /*break*/, 5];
                                _d = __read(_c.value, 2), _1 = _d[0], id = _d[1];
                                (_a = missingPropertiesForID[id]) !== null && _a !== void 0 ? _a : (missingPropertiesForID[id] = new Set(__spreadArray([], __read(requiredProperties), false)));
                                missingPropertiesForID[id].delete(property);
                                if (missingPropertiesForID[id].size === 0) {
                                    matchedIDs.push(id);
                                }
                                _f.label = 4;
                            case 4:
                                _c = _b.next();
                                return [3 /*break*/, 3];
                            case 5: return [3 /*break*/, 8];
                            case 6:
                                e_2_1 = _f.sent();
                                e_2 = { error: e_2_1 };
                                return [3 /*break*/, 8];
                            case 7:
                                try {
                                    if (_c && !_c.done && (_e = _b.return)) _e.call(_b);
                                }
                                finally { if (e_2) throw e_2.error; }
                                return [7 /*endfinally*/];
                            case 8: return [2 /*return*/];
                        }
                    });
                });
            }
            var requiredProperties, missingPropertiesForID, promises, matchedIDs, propertyName, propertyFilter, _a, _b, propertyValue;
            var e_1, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        requiredProperties = new Set();
                        missingPropertiesForID = {};
                        promises = [];
                        matchedIDs = [];
                        for (propertyName in filter) {
                            propertyFilter = filter[propertyName];
                            if (typeof propertyFilter === 'object' && propertyFilter !== null) {
                                if (Array.isArray(propertyFilter)) {
                                    try {
                                        for (_a = (e_1 = void 0, __values(new Set(propertyFilter))), _b = _a.next(); !_b.done; _b = _a.next()) {
                                            propertyValue = _b.value;
                                            checkMatches(propertyName, this.findExactMatches(propertyName, propertyValue, options));
                                        }
                                    }
                                    catch (e_1_1) { e_1 = { error: e_1_1 }; }
                                    finally {
                                        try {
                                            if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                                        }
                                        finally { if (e_1) throw e_1.error; }
                                    }
                                }
                                else {
                                    checkMatches(propertyName, this.findRangeMatches(propertyName, propertyFilter, options));
                                }
                            }
                            else {
                                checkMatches(propertyName, this.findExactMatches(propertyName, propertyFilter, options));
                            }
                            requiredProperties.add(propertyName);
                        }
                        return [4 /*yield*/, Promise.all(promises)];
                    case 1:
                        _d.sent();
                        return [2 /*return*/, matchedIDs];
                }
            });
        });
    };
    IndexLevel.prototype.delete = function (id, options) {
        return __awaiter(this, void 0, void 0, function () {
            var prefixes, ops, _a, _b, prefix;
            var e_3, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0: return [4 /*yield*/, this.db.get("__".concat(id, "__prefixes"), options)];
                    case 1:
                        prefixes = _d.sent();
                        if (!prefixes) {
                            return [2 /*return*/];
                        }
                        ops = [];
                        try {
                            for (_a = __values(JSON.parse(prefixes)), _b = _a.next(); !_b.done; _b = _a.next()) {
                                prefix = _b.value;
                                ops.push({ type: 'del', key: this.join(prefix, id) });
                            }
                        }
                        catch (e_3_1) { e_3 = { error: e_3_1 }; }
                        finally {
                            try {
                                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                            }
                            finally { if (e_3) throw e_3.error; }
                        }
                        ops.push({ type: 'del', key: "__".concat(id, "__prefixes") });
                        return [2 /*return*/, this.db.batch(ops, options)];
                }
            });
        });
    };
    IndexLevel.prototype.clear = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.db.clear()];
            });
        });
    };
    IndexLevel.prototype.findExactMatches = function (propertyName, propertyValue, options) {
        return __awaiter(this, void 0, void 0, function () {
            var propertyKey, iteratorOptions;
            return __generator(this, function (_a) {
                propertyKey = this.join(propertyName, this.encodeValue(propertyValue));
                iteratorOptions = {
                    gt: propertyKey
                };
                return [2 /*return*/, this.findMatches(propertyKey, iteratorOptions, options)];
            });
        });
    };
    IndexLevel.prototype.findRangeMatches = function (propertyName, range, options) {
        return __awaiter(this, void 0, void 0, function () {
            var propertyKey, iteratorOptions, comparator, matches, _a, _b, _c, key, value, e_4_1;
            var e_4, _d;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        propertyKey = this.join(propertyName);
                        iteratorOptions = {};
                        for (comparator in range) {
                            iteratorOptions[comparator] = this.join(propertyName, this.encodeValue(range[comparator]));
                        }
                        return [4 /*yield*/, this.findMatches(propertyKey, iteratorOptions, options)];
                    case 1:
                        matches = _e.sent();
                        if (!('lte' in range)) return [3 /*break*/, 9];
                        _e.label = 2;
                    case 2:
                        _e.trys.push([2, 7, 8, 9]);
                        return [4 /*yield*/, this.findExactMatches(propertyName, range.lte, options)];
                    case 3:
                        _a = __values.apply(void 0, [_e.sent()]), _b = _a.next();
                        _e.label = 4;
                    case 4:
                        if (!!_b.done) return [3 /*break*/, 6];
                        _c = __read(_b.value, 2), key = _c[0], value = _c[1];
                        matches.set(key, value);
                        _e.label = 5;
                    case 5:
                        _b = _a.next();
                        return [3 /*break*/, 4];
                    case 6: return [3 /*break*/, 9];
                    case 7:
                        e_4_1 = _e.sent();
                        e_4 = { error: e_4_1 };
                        return [3 /*break*/, 9];
                    case 8:
                        try {
                            if (_b && !_b.done && (_d = _a.return)) _d.call(_a);
                        }
                        finally { if (e_4) throw e_4.error; }
                        return [7 /*endfinally*/];
                    case 9: return [2 /*return*/, matches];
                }
            });
        });
    };
    IndexLevel.prototype.findMatches = function (propertyName, iteratorOptions, options) {
        var e_5, _a;
        return __awaiter(this, void 0, void 0, function () {
            var matches, _b, _c, _d, key, value, e_5_1;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        // Since we will stop iterating if we encounter entries that do not start with the `propertyName`, we need to always start from the upper bound.
                        // For example, `{ lte: 'b' }` would immediately stop if the data was `[ 'a', 'ab', 'b' ]` since `'a'` does not start with `'b'`.
                        if (('lt' in iteratorOptions || 'lte' in iteratorOptions) && !('gt' in iteratorOptions || 'gte' in iteratorOptions)) {
                            iteratorOptions.reverse = true;
                        }
                        matches = new Map;
                        _e.label = 1;
                    case 1:
                        _e.trys.push([1, 6, 7, 12]);
                        _b = __asyncValues(this.db.iterator(iteratorOptions, options));
                        _e.label = 2;
                    case 2: return [4 /*yield*/, _b.next()];
                    case 3:
                        if (!(_c = _e.sent(), !_c.done)) return [3 /*break*/, 5];
                        _d = __read(_c.value, 2), key = _d[0], value = _d[1];
                        if (!key.startsWith(propertyName)) {
                            return [3 /*break*/, 5];
                        }
                        matches.set(key, value);
                        _e.label = 4;
                    case 4: return [3 /*break*/, 2];
                    case 5: return [3 /*break*/, 12];
                    case 6:
                        e_5_1 = _e.sent();
                        e_5 = { error: e_5_1 };
                        return [3 /*break*/, 12];
                    case 7:
                        _e.trys.push([7, , 10, 11]);
                        if (!(_c && !_c.done && (_a = _b.return))) return [3 /*break*/, 9];
                        return [4 /*yield*/, _a.call(_b)];
                    case 8:
                        _e.sent();
                        _e.label = 9;
                    case 9: return [3 /*break*/, 11];
                    case 10:
                        if (e_5) throw e_5.error;
                        return [7 /*endfinally*/];
                    case 11: return [7 /*endfinally*/];
                    case 12: return [2 /*return*/, matches];
                }
            });
        });
    };
    IndexLevel.prototype.encodeValue = function (value) {
        if (typeof value === 'string') {
            // We can't just `JSON.stringify` as that'll affect the sort order of strings.
            // For example, `'\x00'` becomes `'\\u0000'`.
            return "\"".concat(value, "\"");
        }
        return String(value);
    };
    IndexLevel.prototype.join = function () {
        var values = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            values[_i] = arguments[_i];
        }
        return values.join("\0");
    };
    IndexLevel.prototype.dump = function () {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        console.group('db');
                        return [4 /*yield*/, ((_b = (_a = this.db)['dump']) === null || _b === void 0 ? void 0 : _b.call(_a))];
                    case 1:
                        _c.sent();
                        console.groupEnd();
                        return [2 /*return*/];
                }
            });
        });
    };
    return IndexLevel;
}());
exports.IndexLevel = IndexLevel;
//# sourceMappingURL=index-level.js.map