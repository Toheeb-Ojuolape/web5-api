"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
var __await = (this && this.__await) || function (v) { return this instanceof __await ? (this.v = v, this) : new __await(v); }
var __asyncGenerator = (this && this.__asyncGenerator) || function (thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BlockstoreLevel = void 0;
var multiformats_1 = require("multiformats");
var level_wrapper_js_1 = require("./level-wrapper.js");
// `level` works in Node.js 12+ and Electron 5+ on Linux, Mac OS, Windows and
// FreeBSD, including any future Node.js and Electron release thanks to Node-API, including ARM
// platforms like Raspberry Pi and Android, as well as in Chrome, Firefox, Edge, Safari, iOS Safari
//  and Chrome for Android.
/**
 * Blockstore implementation using LevelDB for storing the actual messages (in the case of MessageStore)
 * or the data associated with messages (in the case of a DataStore).
 */
var BlockstoreLevel = /** @class */ (function () {
    function BlockstoreLevel(config, db) {
        this.config = __assign({ createLevelDatabase: level_wrapper_js_1.createLevelDatabase }, config);
        this.db = db !== null && db !== void 0 ? db : new level_wrapper_js_1.LevelWrapper(__assign(__assign({}, this.config), { valueEncoding: 'binary' }));
    }
    BlockstoreLevel.prototype.open = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.db.open()];
            });
        });
    };
    BlockstoreLevel.prototype.close = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.db.close()];
            });
        });
    };
    BlockstoreLevel.prototype.partition = function (name) {
        return __awaiter(this, void 0, void 0, function () {
            var db;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.db.partition(name)];
                    case 1:
                        db = _a.sent();
                        return [2 /*return*/, new BlockstoreLevel(__assign(__assign({}, this.config), { location: '' }), db)];
                }
            });
        });
    };
    BlockstoreLevel.prototype.put = function (key, val, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.db.put(String(key), val, options)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, multiformats_1.CID.parse(key.toString())];
                }
            });
        });
    };
    BlockstoreLevel.prototype.get = function (key, options) {
        return __awaiter(this, void 0, void 0, function () {
            var result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.db.get(String(key), options)];
                    case 1:
                        result = _a.sent();
                        return [2 /*return*/, result];
                }
            });
        });
    };
    BlockstoreLevel.prototype.has = function (key, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.db.has(String(key), options)];
            });
        });
    };
    BlockstoreLevel.prototype.delete = function (key, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.db.delete(String(key), options)];
            });
        });
    };
    BlockstoreLevel.prototype.isEmpty = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.db.isEmpty(options)];
            });
        });
    };
    BlockstoreLevel.prototype.putMany = function (source, options) {
        return __asyncGenerator(this, arguments, function putMany_1() {
            var source_1, source_1_1, entry, e_1_1;
            var e_1, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _b.trys.push([0, 8, 9, 14]);
                        source_1 = __asyncValues(source);
                        _b.label = 1;
                    case 1: return [4 /*yield*/, __await(source_1.next())];
                    case 2:
                        if (!(source_1_1 = _b.sent(), !source_1_1.done)) return [3 /*break*/, 7];
                        entry = source_1_1.value;
                        return [4 /*yield*/, __await(this.put(entry.cid, entry.block, options))];
                    case 3:
                        _b.sent();
                        return [4 /*yield*/, __await(entry.cid)];
                    case 4: return [4 /*yield*/, _b.sent()];
                    case 5:
                        _b.sent();
                        _b.label = 6;
                    case 6: return [3 /*break*/, 1];
                    case 7: return [3 /*break*/, 14];
                    case 8:
                        e_1_1 = _b.sent();
                        e_1 = { error: e_1_1 };
                        return [3 /*break*/, 14];
                    case 9:
                        _b.trys.push([9, , 12, 13]);
                        if (!(source_1_1 && !source_1_1.done && (_a = source_1.return))) return [3 /*break*/, 11];
                        return [4 /*yield*/, __await(_a.call(source_1))];
                    case 10:
                        _b.sent();
                        _b.label = 11;
                    case 11: return [3 /*break*/, 13];
                    case 12:
                        if (e_1) throw e_1.error;
                        return [7 /*endfinally*/];
                    case 13: return [7 /*endfinally*/];
                    case 14: return [2 /*return*/];
                }
            });
        });
    };
    BlockstoreLevel.prototype.getMany = function (source, options) {
        return __asyncGenerator(this, arguments, function getMany_1() {
            var source_2, source_2_1, key, e_2_1;
            var _a;
            var e_2, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        _c.trys.push([0, 8, 9, 14]);
                        source_2 = __asyncValues(source);
                        _c.label = 1;
                    case 1: return [4 /*yield*/, __await(source_2.next())];
                    case 2:
                        if (!(source_2_1 = _c.sent(), !source_2_1.done)) return [3 /*break*/, 7];
                        key = source_2_1.value;
                        _a = {
                            cid: key
                        };
                        return [4 /*yield*/, __await(this.get(key, options))];
                    case 3: return [4 /*yield*/, __await.apply(void 0, [(_a.block = _c.sent(),
                                _a)])];
                    case 4: return [4 /*yield*/, _c.sent()];
                    case 5:
                        _c.sent();
                        _c.label = 6;
                    case 6: return [3 /*break*/, 1];
                    case 7: return [3 /*break*/, 14];
                    case 8:
                        e_2_1 = _c.sent();
                        e_2 = { error: e_2_1 };
                        return [3 /*break*/, 14];
                    case 9:
                        _c.trys.push([9, , 12, 13]);
                        if (!(source_2_1 && !source_2_1.done && (_b = source_2.return))) return [3 /*break*/, 11];
                        return [4 /*yield*/, __await(_b.call(source_2))];
                    case 10:
                        _c.sent();
                        _c.label = 11;
                    case 11: return [3 /*break*/, 13];
                    case 12:
                        if (e_2) throw e_2.error;
                        return [7 /*endfinally*/];
                    case 13: return [7 /*endfinally*/];
                    case 14: return [2 /*return*/];
                }
            });
        });
    };
    BlockstoreLevel.prototype.getAll = function (options) {
        return __asyncGenerator(this, arguments, function getAll_1() {
            var li, li_1, li_1_1, _a, key, value, e_3_1;
            var e_3, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        li = this.db.iterator({
                            keys: true,
                            keyEncoding: 'buffer'
                        }, options);
                        _c.label = 1;
                    case 1:
                        _c.trys.push([1, 8, 9, 14]);
                        li_1 = __asyncValues(li);
                        _c.label = 2;
                    case 2: return [4 /*yield*/, __await(li_1.next())];
                    case 3:
                        if (!(li_1_1 = _c.sent(), !li_1_1.done)) return [3 /*break*/, 7];
                        _a = __read(li_1_1.value, 2), key = _a[0], value = _a[1];
                        return [4 /*yield*/, __await({ cid: multiformats_1.CID.decode(key), block: value })];
                    case 4: return [4 /*yield*/, _c.sent()];
                    case 5:
                        _c.sent();
                        _c.label = 6;
                    case 6: return [3 /*break*/, 2];
                    case 7: return [3 /*break*/, 14];
                    case 8:
                        e_3_1 = _c.sent();
                        e_3 = { error: e_3_1 };
                        return [3 /*break*/, 14];
                    case 9:
                        _c.trys.push([9, , 12, 13]);
                        if (!(li_1_1 && !li_1_1.done && (_b = li_1.return))) return [3 /*break*/, 11];
                        return [4 /*yield*/, __await(_b.call(li_1))];
                    case 10:
                        _c.sent();
                        _c.label = 11;
                    case 11: return [3 /*break*/, 13];
                    case 12:
                        if (e_3) throw e_3.error;
                        return [7 /*endfinally*/];
                    case 13: return [7 /*endfinally*/];
                    case 14: return [2 /*return*/];
                }
            });
        });
    };
    BlockstoreLevel.prototype.deleteMany = function (source, options) {
        return __asyncGenerator(this, arguments, function deleteMany_1() {
            var source_3, source_3_1, key, e_4_1;
            var e_4, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _b.trys.push([0, 8, 9, 14]);
                        source_3 = __asyncValues(source);
                        _b.label = 1;
                    case 1: return [4 /*yield*/, __await(source_3.next())];
                    case 2:
                        if (!(source_3_1 = _b.sent(), !source_3_1.done)) return [3 /*break*/, 7];
                        key = source_3_1.value;
                        return [4 /*yield*/, __await(this.delete(key, options))];
                    case 3:
                        _b.sent();
                        return [4 /*yield*/, __await(key)];
                    case 4: return [4 /*yield*/, _b.sent()];
                    case 5:
                        _b.sent();
                        _b.label = 6;
                    case 6: return [3 /*break*/, 1];
                    case 7: return [3 /*break*/, 14];
                    case 8:
                        e_4_1 = _b.sent();
                        e_4 = { error: e_4_1 };
                        return [3 /*break*/, 14];
                    case 9:
                        _b.trys.push([9, , 12, 13]);
                        if (!(source_3_1 && !source_3_1.done && (_a = source_3.return))) return [3 /*break*/, 11];
                        return [4 /*yield*/, __await(_a.call(source_3))];
                    case 10:
                        _b.sent();
                        _b.label = 11;
                    case 11: return [3 /*break*/, 13];
                    case 12:
                        if (e_4) throw e_4.error;
                        return [7 /*endfinally*/];
                    case 13: return [7 /*endfinally*/];
                    case 14: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * deletes all entries
     */
    BlockstoreLevel.prototype.clear = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.db.clear()];
            });
        });
    };
    BlockstoreLevel.prototype.dump = function () {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        console.group('db');
                        return [4 /*yield*/, ((_b = (_a = this.db)['dump']) === null || _b === void 0 ? void 0 : _b.call(_a))];
                    case 1:
                        _c.sent();
                        console.groupEnd();
                        return [2 /*return*/];
                }
            });
        });
    };
    return BlockstoreLevel;
}());
exports.BlockstoreLevel = BlockstoreLevel;
//# sourceMappingURL=blockstore-level.js.map