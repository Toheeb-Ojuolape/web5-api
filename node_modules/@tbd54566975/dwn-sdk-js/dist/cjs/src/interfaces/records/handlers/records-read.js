"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RecordsReadHandler = void 0;
var auth_js_1 = require("../../../core/auth.js");
var message_js_1 = require("../../../core/message.js");
var message_reply_js_1 = require("../../../core/message-reply.js");
var records_read_js_1 = require("../messages/records-read.js");
var records_write_js_1 = require("../messages/records-write.js");
var message_js_2 = require("../../../core/message.js");
var RecordsReadHandler = /** @class */ (function () {
    function RecordsReadHandler(didResolver, messageStore, dataStore) {
        this.didResolver = didResolver;
        this.messageStore = messageStore;
        this.dataStore = dataStore;
    }
    RecordsReadHandler.prototype.handle = function (_a) {
        var tenant = _a.tenant, message = _a.message;
        return __awaiter(this, void 0, void 0, function () {
            var recordsRead, e_1, e_2, query, existingMessages, newestExistingMessage, newestRecordsWrite, _b, _c, _d, error_1, messageCid, result, _, recordsWriteWithoutAuthorization, messageReply;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        _e.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, records_read_js_1.RecordsRead.parse(message)];
                    case 1:
                        recordsRead = _e.sent();
                        return [3 /*break*/, 3];
                    case 2:
                        e_1 = _e.sent();
                        return [2 /*return*/, message_reply_js_1.MessageReply.fromError(e_1, 400)];
                    case 3:
                        _e.trys.push([3, 6, , 7]);
                        if (!(recordsRead.author !== undefined)) return [3 /*break*/, 5];
                        return [4 /*yield*/, (0, auth_js_1.authenticate)(message.authorization, this.didResolver)];
                    case 4:
                        _e.sent();
                        _e.label = 5;
                    case 5: return [3 /*break*/, 7];
                    case 6:
                        e_2 = _e.sent();
                        return [2 /*return*/, message_reply_js_1.MessageReply.fromError(e_2, 401)];
                    case 7:
                        query = {
                            interface: message_js_2.DwnInterfaceName.Records,
                            recordId: message.descriptor.recordId
                        };
                        return [4 /*yield*/, this.messageStore.query(tenant, query)];
                    case 8:
                        existingMessages = _e.sent();
                        return [4 /*yield*/, records_write_js_1.RecordsWrite.getNewestMessage(existingMessages)];
                    case 9:
                        newestExistingMessage = _e.sent();
                        // if no record found or it has been deleted
                        if (newestExistingMessage === undefined || newestExistingMessage.descriptor.method === message_js_2.DwnMethodName.Delete) {
                            return [2 /*return*/, new message_reply_js_1.MessageReply({
                                    status: { code: 404, detail: 'Not Found' }
                                })];
                        }
                        newestRecordsWrite = newestExistingMessage;
                        _e.label = 10;
                    case 10:
                        _e.trys.push([10, 13, , 14]);
                        _c = (_b = recordsRead).authorize;
                        _d = [tenant];
                        return [4 /*yield*/, records_write_js_1.RecordsWrite.parse(newestRecordsWrite)];
                    case 11: return [4 /*yield*/, _c.apply(_b, _d.concat([_e.sent(), this.messageStore]))];
                    case 12:
                        _e.sent();
                        return [3 /*break*/, 14];
                    case 13:
                        error_1 = _e.sent();
                        return [2 /*return*/, message_reply_js_1.MessageReply.fromError(error_1, 401)];
                    case 14: return [4 /*yield*/, message_js_1.Message.getCid(newestRecordsWrite)];
                    case 15:
                        messageCid = _e.sent();
                        return [4 /*yield*/, this.dataStore.get(tenant, messageCid, newestRecordsWrite.descriptor.dataCid)];
                    case 16:
                        result = _e.sent();
                        if ((result === null || result === void 0 ? void 0 : result.dataStream) === undefined) {
                            return [2 /*return*/, new message_reply_js_1.MessageReply({
                                    status: { code: 404, detail: 'Not Found' }
                                })];
                        }
                        _ = newestRecordsWrite.authorization, recordsWriteWithoutAuthorization = __rest(newestRecordsWrite, ["authorization"]);
                        messageReply = {
                            status: { code: 200, detail: 'OK' },
                            record: __assign(__assign({}, recordsWriteWithoutAuthorization), { data: result.dataStream })
                        };
                        return [2 /*return*/, messageReply];
                }
            });
        });
    };
    ;
    return RecordsReadHandler;
}());
exports.RecordsReadHandler = RecordsReadHandler;
//# sourceMappingURL=records-read.js.map