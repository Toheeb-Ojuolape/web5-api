"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Secp256k1 = void 0;
var secp256k1 = __importStar(require("@noble/secp256k1"));
var secp256k1_1 = __importDefault(require("secp256k1"));
var encoder_js_1 = require("../utils/encoder.js");
var sha2_1 = require("multiformats/hashes/sha2");
var dwn_error_js_1 = require("../core/dwn-error.js");
/**
 * Class containing SECP256K1 related utility methods.
 */
var Secp256k1 = /** @class */ (function () {
    function Secp256k1() {
    }
    /**
     * Validates the given JWK is a SECP256K1 key.
     * @throws {Error} if fails validation.
     */
    Secp256k1.validateKey = function (jwk) {
        if (jwk.kty !== 'EC' || jwk.crv !== 'secp256k1') {
            throw new dwn_error_js_1.DwnError(dwn_error_js_1.DwnErrorCode.Secp256k1KeyNotValid, 'Invalid SECP256K1 JWK: `kty` MUST be `EC`. `crv` MUST be `secp256k1`');
        }
    };
    /**
     * Converts a public key in bytes into a JWK.
     */
    Secp256k1.publicKeyToJwk = function (publicKeyBytes) {
        return __awaiter(this, void 0, void 0, function () {
            var uncompressedPublicKeyBytes, publicKeyHex, curvePoints, x, y, publicJwk;
            return __generator(this, function (_a) {
                if (publicKeyBytes.byteLength === 33) {
                    publicKeyHex = secp256k1.utils.bytesToHex(publicKeyBytes);
                    curvePoints = secp256k1.Point.fromHex(publicKeyHex);
                    uncompressedPublicKeyBytes = curvePoints.toRawBytes(false); // isCompressed = false
                }
                else {
                    uncompressedPublicKeyBytes = publicKeyBytes;
                }
                x = encoder_js_1.Encoder.bytesToBase64Url(uncompressedPublicKeyBytes.subarray(1, 33));
                y = encoder_js_1.Encoder.bytesToBase64Url(uncompressedPublicKeyBytes.subarray(33, 65));
                publicJwk = {
                    alg: 'ES256K',
                    kty: 'EC',
                    crv: 'secp256k1',
                    x: x,
                    y: y
                };
                return [2 /*return*/, publicJwk];
            });
        });
    };
    /**
     * Converts a private key in bytes into a JWK.
     */
    Secp256k1.privateKeyToJwk = function (privateKeyBytes) {
        return __awaiter(this, void 0, void 0, function () {
            var publicKeyBytes, jwk;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, Secp256k1.getPublicKey(privateKeyBytes)];
                    case 1:
                        publicKeyBytes = _a.sent();
                        return [4 /*yield*/, Secp256k1.publicKeyToJwk(publicKeyBytes)];
                    case 2:
                        jwk = _a.sent();
                        jwk.d = encoder_js_1.Encoder.bytesToBase64Url(privateKeyBytes);
                        return [2 /*return*/, jwk];
                }
            });
        });
    };
    /**
     * Creates a uncompressed key in raw bytes from the given SECP256K1 JWK.
     */
    Secp256k1.publicJwkToBytes = function (publicJwk) {
        var x = encoder_js_1.Encoder.base64UrlToBytes(publicJwk.x);
        var y = encoder_js_1.Encoder.base64UrlToBytes(publicJwk.y);
        // leading byte of 0x04 indicates that the public key is uncompressed
        var publicKey = new Uint8Array(__spreadArray(__spreadArray([0x04], __read(x), false), __read(y), false));
        return publicKey;
    };
    /**
     * Creates a private key in raw bytes from the given SECP256K1 JWK.
     */
    Secp256k1.privateJwkToBytes = function (privateJwk) {
        var privateKey = encoder_js_1.Encoder.base64UrlToBytes(privateJwk.d);
        return privateKey;
    };
    /**
     * Signs the provided content using the provided JWK.
     */
    Secp256k1.sign = function (content, privateJwk) {
        return __awaiter(this, void 0, void 0, function () {
            var hashedContent, privateKeyBytes;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        Secp256k1.validateKey(privateJwk);
                        return [4 /*yield*/, sha2_1.sha256.encode(content)];
                    case 1:
                        hashedContent = _a.sent();
                        privateKeyBytes = Secp256k1.privateJwkToBytes(privateJwk);
                        return [4 /*yield*/, secp256k1.sign(hashedContent, privateKeyBytes, { der: false })];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Verifies a signature against the provided payload hash and public key.
     * @returns a boolean indicating whether the signature is valid.
     */
    Secp256k1.verify = function (content, signature, publicJwk) {
        return __awaiter(this, void 0, void 0, function () {
            var publicKeyBytes, hashedContent;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        Secp256k1.validateKey(publicJwk);
                        publicKeyBytes = Secp256k1.publicJwkToBytes(publicJwk);
                        return [4 /*yield*/, sha2_1.sha256.encode(content)];
                    case 1:
                        hashedContent = _a.sent();
                        return [2 /*return*/, secp256k1.verify(signature, hashedContent, publicKeyBytes)];
                }
            });
        });
    };
    /**
     * Generates a random key pair in JWK format.
     */
    Secp256k1.generateKeyPair = function () {
        return __awaiter(this, void 0, void 0, function () {
            var privateKeyBytes, publicKeyBytes, d, publicJwk, privateJwk;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        privateKeyBytes = secp256k1.utils.randomPrivateKey();
                        publicKeyBytes = secp256k1.getPublicKey(privateKeyBytes);
                        d = encoder_js_1.Encoder.bytesToBase64Url(privateKeyBytes);
                        return [4 /*yield*/, Secp256k1.publicKeyToJwk(publicKeyBytes)];
                    case 1:
                        publicJwk = _a.sent();
                        privateJwk = __assign(__assign({}, publicJwk), { d: d });
                        return [2 /*return*/, { publicJwk: publicJwk, privateJwk: privateJwk }];
                }
            });
        });
    };
    /**
     * Generates key pair in raw bytes, where the `publicKey` is uncompressed.
     */
    Secp256k1.generateKeyPairRaw = function () {
        return __awaiter(this, void 0, void 0, function () {
            var privateKey, publicKey;
            return __generator(this, function (_a) {
                privateKey = secp256k1.utils.randomPrivateKey();
                publicKey = secp256k1.getPublicKey(privateKey);
                return [2 /*return*/, { publicKey: publicKey, privateKey: privateKey }];
            });
        });
    };
    /**
     * Gets the uncompressed public key of the given private key.
     */
    Secp256k1.getPublicKey = function (privateKey) {
        return __awaiter(this, void 0, void 0, function () {
            var compressedPublicKey, publicKey;
            return __generator(this, function (_a) {
                compressedPublicKey = false;
                publicKey = secp256k1.getPublicKey(privateKey, compressedPublicKey);
                return [2 /*return*/, publicKey];
            });
        });
    };
    /**
     * Derives a hierarchical deterministic public key.
     * @param key Either a private or an uncompressed public key used to derive the descendant public key.
     * @returns uncompressed public key
     */
    Secp256k1.derivePublicKey = function (key, relativePath) {
        return __awaiter(this, void 0, void 0, function () {
            var currentPublicKey, relativePath_1, relativePath_1_1, segment, hash, e_1_1;
            var e_1, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        Secp256k1.validateKeyDerivationPath(relativePath);
                        if (key.length === 32) {
                            // private key is always 32 bytes
                            currentPublicKey = secp256k1.getPublicKey(key);
                        }
                        else {
                            currentPublicKey = key;
                        }
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 6, 7, 8]);
                        relativePath_1 = __values(relativePath), relativePath_1_1 = relativePath_1.next();
                        _b.label = 2;
                    case 2:
                        if (!!relativePath_1_1.done) return [3 /*break*/, 5];
                        segment = relativePath_1_1.value;
                        return [4 /*yield*/, sha2_1.sha256.encode(encoder_js_1.Encoder.stringToBytes(segment))];
                    case 3:
                        hash = _b.sent();
                        currentPublicKey = Secp256k1.deriveChildPublicKey(currentPublicKey, hash);
                        _b.label = 4;
                    case 4:
                        relativePath_1_1 = relativePath_1.next();
                        return [3 /*break*/, 2];
                    case 5: return [3 /*break*/, 8];
                    case 6:
                        e_1_1 = _b.sent();
                        e_1 = { error: e_1_1 };
                        return [3 /*break*/, 8];
                    case 7:
                        try {
                            if (relativePath_1_1 && !relativePath_1_1.done && (_a = relativePath_1.return)) _a.call(relativePath_1);
                        }
                        finally { if (e_1) throw e_1.error; }
                        return [7 /*endfinally*/];
                    case 8: return [2 /*return*/, currentPublicKey];
                }
            });
        });
    };
    /**
     * Derives a hierarchical deterministic private key.
     */
    Secp256k1.derivePrivateKey = function (privateKey, relativePath) {
        return __awaiter(this, void 0, void 0, function () {
            var currentPrivateKey, relativePath_2, relativePath_2_1, segment, hash, e_2_1;
            var e_2, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        Secp256k1.validateKeyDerivationPath(relativePath);
                        currentPrivateKey = privateKey;
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 6, 7, 8]);
                        relativePath_2 = __values(relativePath), relativePath_2_1 = relativePath_2.next();
                        _b.label = 2;
                    case 2:
                        if (!!relativePath_2_1.done) return [3 /*break*/, 5];
                        segment = relativePath_2_1.value;
                        return [4 /*yield*/, sha2_1.sha256.encode(encoder_js_1.Encoder.stringToBytes(segment))];
                    case 3:
                        hash = _b.sent();
                        currentPrivateKey = Secp256k1.deriveChildPrivateKey(currentPrivateKey, hash);
                        _b.label = 4;
                    case 4:
                        relativePath_2_1 = relativePath_2.next();
                        return [3 /*break*/, 2];
                    case 5: return [3 /*break*/, 8];
                    case 6:
                        e_2_1 = _b.sent();
                        e_2 = { error: e_2_1 };
                        return [3 /*break*/, 8];
                    case 7:
                        try {
                            if (relativePath_2_1 && !relativePath_2_1.done && (_a = relativePath_2.return)) _a.call(relativePath_2);
                        }
                        finally { if (e_2) throw e_2.error; }
                        return [7 /*endfinally*/];
                    case 8: return [2 /*return*/, currentPrivateKey];
                }
            });
        });
    };
    /**
     * Derives a child public key using the given tweak input.
     */
    Secp256k1.deriveChildPublicKey = function (uncompressedPublicKey, tweakInput) {
        // underlying library requires Buffer as input
        var compressedPublicKey = false;
        var publicKeyBuffer = Buffer.from(uncompressedPublicKey);
        var tweakBuffer = Buffer.from(tweakInput);
        var derivedPublicKey = secp256k1_1.default.publicKeyTweakAdd(publicKeyBuffer, tweakBuffer, compressedPublicKey);
        return derivedPublicKey;
    };
    /**
     * Derives a child private key using the given tweak input.
     */
    Secp256k1.deriveChildPrivateKey = function (privateKey, tweakInput) {
        // NOTE: passing in private key to v5.0.0 of `secp256k1.privateKeyTweakAdd()` has the side effect of modifying the input private key bytes.
        // `secp256k1.publicKeyTweakAdd()` does not have this side effect.
        // before there is a fix for it (we can also investigate and submit a PR), cloning the private key to workaround is a MUST
        // also underlying library requires Buffer as input
        var privateKeyBuffer = Buffer.from(privateKey);
        var tweakBuffer = Buffer.from(tweakInput);
        var derivedPrivateKey = secp256k1_1.default.privateKeyTweakAdd(privateKeyBuffer, tweakBuffer);
        return derivedPrivateKey;
    };
    /**
     * Parses the given key derivation path.
     * @returns Path segments if successfully validate the derivation path.
     * @throws {DwnError} with `DwnErrorCode.HdKeyDerivationPathInvalid` if derivation path fails validation.
     */
    Secp256k1.validateKeyDerivationPath = function (pathSegments) {
        if (pathSegments.includes('')) {
            throw new dwn_error_js_1.DwnError(dwn_error_js_1.DwnErrorCode.HdKeyDerivationPathInvalid, "Invalid key derivation path: ".concat(pathSegments));
        }
    };
    return Secp256k1;
}());
exports.Secp256k1 = Secp256k1;
//# sourceMappingURL=secp256k1.js.map