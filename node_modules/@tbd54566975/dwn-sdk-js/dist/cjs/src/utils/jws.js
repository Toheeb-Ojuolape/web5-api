"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Jws = void 0;
var isPlainObject_js_1 = __importDefault(require("lodash/isPlainObject.js"));
var encoder_js_1 = require("./encoder.js");
var signers_js_1 = require("../jose/algorithms/signing/signers.js");
/**
 * Utility class for JWS related operations.
 */
var Jws = /** @class */ (function () {
    function Jws() {
    }
    /**
     * Gets the `kid` from a general JWS signature entry.
     */
    Jws.getKid = function (signatureEntry) {
        var kid = encoder_js_1.Encoder.base64UrlToObject(signatureEntry.protected).kid;
        return kid;
    };
    /**
     * Gets the signer DID from a general JWS signature entry.
     */
    Jws.getSignerDid = function (signatureEntry) {
        var kid = Jws.getKid(signatureEntry);
        var did = Jws.extractDid(kid);
        return did;
    };
    /**
     * Verifies the signature against the given payload.
     * @returns `true` if signature is valid; `false` otherwise
     */
    Jws.verifySignature = function (base64UrlPayload, signatureEntry, jwkPublic) {
        return __awaiter(this, void 0, void 0, function () {
            var verifier, payload, signatureBytes;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        verifier = signers_js_1.signers[jwkPublic.crv];
                        if (!verifier) {
                            throw new Error("unsupported crv. crv must be one of ".concat(Object.keys(signers_js_1.signers)));
                        }
                        payload = encoder_js_1.Encoder.stringToBytes("".concat(signatureEntry.protected, ".").concat(base64UrlPayload));
                        signatureBytes = encoder_js_1.Encoder.base64UrlToBytes(signatureEntry.signature);
                        return [4 /*yield*/, verifier.verify(payload, signatureBytes, jwkPublic)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Decodes the payload of the given JWS object as a plain object.
     */
    Jws.decodePlainObjectPayload = function (jws) {
        var payloadJson;
        try {
            payloadJson = encoder_js_1.Encoder.base64UrlToObject(jws.payload);
        }
        catch (_a) {
            throw new Error('payload is not a JSON object');
        }
        if (!(0, isPlainObject_js_1.default)(payloadJson)) {
            throw new Error('signed payload must be a plain object');
        }
        return payloadJson;
    };
    /**
     * Extracts the DID from the given `kid` string.
     */
    Jws.extractDid = function (kid) {
        var _a = __read(kid.split('#'), 1), did = _a[0];
        return did;
    };
    /**
     * Creates a SignatureInput[] from the given Personas.
     */
    Jws.createSignatureInputs = function (keyMaterials) {
        var signatureInputs = keyMaterials.map(function (keyMaterial) { return Jws.createSignatureInput(keyMaterial); });
        return signatureInputs;
    };
    /**
     * Creates a SignatureInput from the given Persona.
     */
    Jws.createSignatureInput = function (keyMaterial) {
        var signatureInput = {
            privateJwk: keyMaterial.keyPair.privateJwk,
            protectedHeader: {
                alg: keyMaterial.keyPair.privateJwk.alg,
                kid: keyMaterial.keyId
            }
        };
        return signatureInput;
    };
    return Jws;
}());
exports.Jws = Jws;
//# sourceMappingURL=jws.js.map