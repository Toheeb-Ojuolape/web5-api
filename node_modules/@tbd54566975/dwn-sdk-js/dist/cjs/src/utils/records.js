"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Records = void 0;
var encoder_js_1 = require("./encoder.js");
var encryption_js_1 = require("./encryption.js");
var hd_key_js_1 = require("./hd-key.js");
var secp256k1_js_1 = require("./secp256k1.js");
var dwn_error_js_1 = require("../core/dwn-error.js");
/**
 * Class containing useful utilities related to the Records interface.
 */
var Records = /** @class */ (function () {
    function Records() {
    }
    /**
     * Decrypts the encrypted data in a message reply using the given ancestor private key.
     * @param ancestorPrivateKey Any ancestor private key in the key derivation path.
     */
    Records.decrypt = function (recordsWrite, ancestorPrivateKey, cipherStream) {
        return __awaiter(this, void 0, void 0, function () {
            var recordId, contextId, descriptor, encryption, matchingEncryptedKey, fullDerivationPath, leafPrivateKey, encryptedKeyBytes, ephemeralPublicKey, keyEncryptionInitializationVector, messageAuthenticationCode, dataEncryptionKey, dataEncryptionInitializationVector, plaintextStream;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        recordId = recordsWrite.recordId, contextId = recordsWrite.contextId, descriptor = recordsWrite.descriptor, encryption = recordsWrite.encryption;
                        matchingEncryptedKey = encryption.keyEncryption.find(function (key) {
                            return key.rootKeyId === ancestorPrivateKey.rootKeyId &&
                                key.derivationScheme === ancestorPrivateKey.derivationScheme;
                        });
                        if (matchingEncryptedKey === undefined) {
                            throw new dwn_error_js_1.DwnError(dwn_error_js_1.DwnErrorCode.RecordsDecryptNoMatchingKeyEncryptedFound, "Unable to find a symmetric key encrypted using key         with ID '".concat(ancestorPrivateKey.rootKeyId, "' and '").concat(ancestorPrivateKey.derivationScheme, "' derivation scheme."));
                        }
                        fullDerivationPath = Records.constructKeyDerivationPath(matchingEncryptedKey.derivationScheme, recordId, contextId, descriptor);
                        return [4 /*yield*/, Records.deriveLeafPrivateKey(ancestorPrivateKey, fullDerivationPath)];
                    case 1:
                        leafPrivateKey = _a.sent();
                        encryptedKeyBytes = encoder_js_1.Encoder.base64UrlToBytes(matchingEncryptedKey.encryptedKey);
                        ephemeralPublicKey = secp256k1_js_1.Secp256k1.publicJwkToBytes(matchingEncryptedKey.ephemeralPublicKey);
                        keyEncryptionInitializationVector = encoder_js_1.Encoder.base64UrlToBytes(matchingEncryptedKey.initializationVector);
                        messageAuthenticationCode = encoder_js_1.Encoder.base64UrlToBytes(matchingEncryptedKey.messageAuthenticationCode);
                        return [4 /*yield*/, encryption_js_1.Encryption.eciesSecp256k1Decrypt({
                                ciphertext: encryptedKeyBytes,
                                ephemeralPublicKey: ephemeralPublicKey,
                                initializationVector: keyEncryptionInitializationVector,
                                messageAuthenticationCode: messageAuthenticationCode,
                                privateKey: leafPrivateKey
                            })];
                    case 2:
                        dataEncryptionKey = _a.sent();
                        dataEncryptionInitializationVector = encoder_js_1.Encoder.base64UrlToBytes(encryption.initializationVector);
                        return [4 /*yield*/, encryption_js_1.Encryption.aes256CtrDecrypt(dataEncryptionKey, dataEncryptionInitializationVector, cipherStream)];
                    case 3:
                        plaintextStream = _a.sent();
                        return [2 /*return*/, plaintextStream];
                }
            });
        });
    };
    /**
     * Constructs full key derivation path using the specified scheme.
     */
    Records.constructKeyDerivationPath = function (keyDerivationScheme, recordId, contextId, descriptor) {
        var fullDerivationPath;
        if (keyDerivationScheme === hd_key_js_1.KeyDerivationScheme.DataFormats) {
            fullDerivationPath = Records.constructKeyDerivationPathUsingDataFormatsScheme(recordId, descriptor);
        }
        else if (keyDerivationScheme === hd_key_js_1.KeyDerivationScheme.Protocols) {
            fullDerivationPath = Records.constructKeyDerivationPathUsingProtocolsScheme(recordId, contextId, descriptor);
        }
        else {
            // `schemas` scheme
            fullDerivationPath = Records.constructKeyDerivationPathUsingSchemasScheme(recordId, descriptor);
        }
        return fullDerivationPath;
    };
    /**
     * Constructs the full key derivation path using `dataFormats` scheme.
     */
    Records.constructKeyDerivationPathUsingDataFormatsScheme = function (recordId, descriptor) {
        var fullDerivationPath = [
            hd_key_js_1.KeyDerivationScheme.DataFormats,
            descriptor.dataFormat,
            recordId
        ];
        return fullDerivationPath;
    };
    /**
     * Constructs the full key derivation path using `protocols` scheme.
     */
    Records.constructKeyDerivationPathUsingProtocolsScheme = function (recordId, contextId, descriptor) {
        // ensure `protocol` is defined
        // NOTE: no need to check `protocolPath` and `contextId` because earlier code ensures that if `protocol` is defined, those are defined also
        if (descriptor.protocol === undefined) {
            throw new dwn_error_js_1.DwnError(dwn_error_js_1.DwnErrorCode.RecordsProtocolsDerivationSchemeMissingProtocol, 'Unable to construct key derivation path using `protocols` scheme because `protocol` is missing.');
        }
        var protocolPathSegments = descriptor.protocolPath.split('/');
        var fullDerivationPath = __spreadArray(__spreadArray([
            hd_key_js_1.KeyDerivationScheme.Protocols,
            descriptor.protocol,
            contextId
        ], __read(protocolPathSegments), false), [
            descriptor.dataFormat,
            recordId
        ], false);
        return fullDerivationPath;
    };
    /**
     * Constructs the full key derivation path using `schemas` scheme.
     */
    Records.constructKeyDerivationPathUsingSchemasScheme = function (recordId, descriptor) {
        if (descriptor.schema === undefined) {
            throw new dwn_error_js_1.DwnError(dwn_error_js_1.DwnErrorCode.RecordsSchemasDerivationSchemeMissingSchema, 'Unable to construct key derivation path using `schemas` scheme because `schema` is missing.');
        }
        var fullDerivationPath = [
            hd_key_js_1.KeyDerivationScheme.Schemas,
            descriptor.schema,
            descriptor.dataFormat,
            recordId
        ];
        return fullDerivationPath;
    };
    /**
     * Derives a descendant public key given an ancestor public key.
     * NOTE: right now only `ECIES-ES256K` algorithm is supported for asymmetric encryption,
     *       so we will assume that's the algorithm without additional switch/if statements
     */
    Records.deriveLeafPublicKey = function (rootPublicKey, fullDescendantDerivationPath) {
        return __awaiter(this, void 0, void 0, function () {
            var ancestorPublicKeyBytes, leafPublicKey;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (rootPublicKey.crv !== 'secp256k1') {
                            throw new dwn_error_js_1.DwnError(dwn_error_js_1.DwnErrorCode.RecordsDeriveLeafPublicKeyUnSupportedCurve, "Curve ".concat(rootPublicKey.crv, " is not supported."));
                        }
                        ancestorPublicKeyBytes = secp256k1_js_1.Secp256k1.publicJwkToBytes(rootPublicKey);
                        return [4 /*yield*/, secp256k1_js_1.Secp256k1.derivePublicKey(ancestorPublicKeyBytes, fullDescendantDerivationPath)];
                    case 1:
                        leafPublicKey = _a.sent();
                        return [2 /*return*/, leafPublicKey];
                }
            });
        });
    };
    /**
     * Derives a descendant private key given an ancestor private key.
     * NOTE: right now only `ECIES-ES256K` algorithm is supported for asymmetric encryption,
     *       so we will assume that's the algorithm without additional switch/if statements
     */
    Records.deriveLeafPrivateKey = function (ancestorPrivateKey, fullDescendantDerivationPath) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var ancestorPrivateKeyDerivationPath, subDerivationPath, ancestorPrivateKeyBytes, leafPrivateKey;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (ancestorPrivateKey.derivedPrivateKey.crv !== 'secp256k1') {
                            throw new dwn_error_js_1.DwnError(dwn_error_js_1.DwnErrorCode.RecordsDeriveLeafPrivateKeyUnSupportedCurve, "Curve ".concat(ancestorPrivateKey.derivedPrivateKey.crv, " is not supported."));
                        }
                        ancestorPrivateKeyDerivationPath = (_a = ancestorPrivateKey.derivationPath) !== null && _a !== void 0 ? _a : [];
                        Records.validateAncestorKeyAndDescentKeyDerivationPathsMatch(ancestorPrivateKeyDerivationPath, fullDescendantDerivationPath);
                        subDerivationPath = fullDescendantDerivationPath.slice(ancestorPrivateKeyDerivationPath.length);
                        ancestorPrivateKeyBytes = secp256k1_js_1.Secp256k1.privateJwkToBytes(ancestorPrivateKey.derivedPrivateKey);
                        return [4 /*yield*/, secp256k1_js_1.Secp256k1.derivePrivateKey(ancestorPrivateKeyBytes, subDerivationPath)];
                    case 1:
                        leafPrivateKey = _b.sent();
                        return [2 /*return*/, leafPrivateKey];
                }
            });
        });
    };
    /**
     * Validates that ancestor derivation path matches the descendant derivation path completely.
     * @throws {DwnError} with `DwnErrorCode.RecordsInvalidAncestorKeyDerivationSegment` if fails validation.
     */
    Records.validateAncestorKeyAndDescentKeyDerivationPathsMatch = function (ancestorKeyDerivationPath, descendantKeyDerivationPath) {
        for (var i = 0; i < ancestorKeyDerivationPath.length; i++) {
            var ancestorSegment = ancestorKeyDerivationPath[i];
            var descendantSegment = descendantKeyDerivationPath[i];
            if (ancestorSegment !== descendantSegment) {
                throw new dwn_error_js_1.DwnError(dwn_error_js_1.DwnErrorCode.RecordsInvalidAncestorKeyDerivationSegment, "Ancestor key derivation segment '".concat(ancestorSegment, "' mismatches against the descendant key derivation segment '").concat(descendantSegment, "'."));
            }
        }
    };
    return Records;
}());
exports.Records = Records;
//# sourceMappingURL=records.js.map