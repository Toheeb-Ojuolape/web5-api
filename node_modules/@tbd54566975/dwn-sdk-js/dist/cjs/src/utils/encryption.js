"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EncryptionAlgorithm = exports.Encryption = void 0;
var crypto = __importStar(require("crypto"));
var eccrypto = __importStar(require("eccrypto"));
var readable_stream_1 = require("readable-stream");
/**
 * Utility class for performing common, non-DWN specific encryption operations.
 */
var Encryption = /** @class */ (function () {
    function Encryption() {
    }
    /**
     * Encrypts the given plaintext stream using AES-256-CTR algorithm.
     */
    Encryption.aes256CtrEncrypt = function (key, initializationVector, plaintextStream) {
        return __awaiter(this, void 0, void 0, function () {
            var cipher, cipherStream;
            return __generator(this, function (_a) {
                cipher = crypto.createCipheriv('aes-256-ctr', key, initializationVector);
                cipherStream = new readable_stream_1.Readable({
                    read: function () { }
                });
                plaintextStream.on('data', function (chunk) {
                    var encryptedChunk = cipher.update(chunk);
                    cipherStream.push(encryptedChunk);
                });
                plaintextStream.on('end', function () {
                    var finalChunk = cipher.final();
                    cipherStream.push(finalChunk);
                    cipherStream.push(null);
                });
                plaintextStream.on('error', function (err) {
                    cipherStream.emit('error', err);
                });
                return [2 /*return*/, cipherStream];
            });
        });
    };
    /**
     * Decrypts the given cipher stream using AES-256-CTR algorithm.
     */
    Encryption.aes256CtrDecrypt = function (key, initializationVector, cipherStream) {
        return __awaiter(this, void 0, void 0, function () {
            var decipher, plaintextStream;
            return __generator(this, function (_a) {
                decipher = crypto.createDecipheriv('aes-256-ctr', key, initializationVector);
                plaintextStream = new readable_stream_1.Readable({
                    read: function () { }
                });
                cipherStream.on('data', function (chunk) {
                    var decryptedChunk = decipher.update(chunk);
                    plaintextStream.push(decryptedChunk);
                });
                cipherStream.on('end', function () {
                    var finalChunk = decipher.final();
                    plaintextStream.push(finalChunk);
                    plaintextStream.push(null);
                });
                cipherStream.on('error', function (err) {
                    plaintextStream.emit('error', err);
                });
                return [2 /*return*/, plaintextStream];
            });
        });
    };
    /**
     * Encrypts the given plaintext using ECIES (Elliptic Curve Integrated Encryption Scheme) with SECP256K1.
     */
    Encryption.eciesSecp256k1Encrypt = function (uncompressedPublicKey, plaintext) {
        return __awaiter(this, void 0, void 0, function () {
            var publicKey, _a, ciphertext, ephemPublicKey, iv, mac;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        publicKey = Buffer.from(uncompressedPublicKey);
                        return [4 /*yield*/, eccrypto.encrypt(publicKey, plaintext)];
                    case 1:
                        _a = _b.sent(), ciphertext = _a.ciphertext, ephemPublicKey = _a.ephemPublicKey, iv = _a.iv, mac = _a.mac;
                        return [2 /*return*/, {
                                ciphertext: ciphertext,
                                ephemeralPublicKey: ephemPublicKey,
                                initializationVector: iv,
                                messageAuthenticationCode: mac
                            }];
                }
            });
        });
    };
    /**
     * Decrypt the given plaintext using ECIES (Elliptic Curve Integrated Encryption Scheme) with SECP256K1.
     */
    Encryption.eciesSecp256k1Decrypt = function (input) {
        return __awaiter(this, void 0, void 0, function () {
            var privateKeyBuffer, ephemPublicKey, eciesEncryptionOutput, plaintext;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        privateKeyBuffer = Buffer.from(input.privateKey);
                        ephemPublicKey = Buffer.from(input.ephemeralPublicKey);
                        eciesEncryptionOutput = {
                            ciphertext: input.ciphertext,
                            ephemPublicKey: ephemPublicKey,
                            iv: input.initializationVector,
                            mac: input.messageAuthenticationCode
                        };
                        return [4 /*yield*/, eccrypto.decrypt(privateKeyBuffer, eciesEncryptionOutput)];
                    case 1:
                        plaintext = _a.sent();
                        return [2 /*return*/, plaintext];
                }
            });
        });
    };
    return Encryption;
}());
exports.Encryption = Encryption;
var EncryptionAlgorithm;
(function (EncryptionAlgorithm) {
    EncryptionAlgorithm["Aes256Ctr"] = "A256CTR";
    EncryptionAlgorithm["EciesSecp256k1"] = "ECIES-ES256K";
})(EncryptionAlgorithm = exports.EncryptionAlgorithm || (exports.EncryptionAlgorithm = {}));
//# sourceMappingURL=encryption.js.map