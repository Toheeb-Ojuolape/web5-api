"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GeneralJwsVerifier = void 0;
var jws_js_1 = require("../../../utils/jws.js");
var memory_cache_js_1 = require("../../../utils/memory-cache.js");
var schema_validator_js_1 = require("../../../schema-validator.js");
var GeneralJwsVerifier = /** @class */ (function () {
    function GeneralJwsVerifier(jws, cache) {
        this.jws = jws;
        this.cache = cache || new memory_cache_js_1.MemoryCache(600);
    }
    GeneralJwsVerifier.prototype.verify = function (didResolver) {
        return __awaiter(this, void 0, void 0, function () {
            var signers, _a, _b, signatureEntry, isVerified, cacheKey, kid, publicJwk, cachedValue, did, e_1_1;
            var e_1, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        signers = [];
                        _d.label = 1;
                    case 1:
                        _d.trys.push([1, 11, 12, 13]);
                        _a = __values(this.jws.signatures), _b = _a.next();
                        _d.label = 2;
                    case 2:
                        if (!!_b.done) return [3 /*break*/, 10];
                        signatureEntry = _b.value;
                        isVerified = void 0;
                        cacheKey = "".concat(signatureEntry.protected, ".").concat(this.jws.payload, ".").concat(signatureEntry.signature);
                        kid = jws_js_1.Jws.getKid(signatureEntry);
                        return [4 /*yield*/, GeneralJwsVerifier.getPublicKey(kid, didResolver)];
                    case 3:
                        publicJwk = _d.sent();
                        return [4 /*yield*/, this.cache.get(cacheKey)];
                    case 4:
                        cachedValue = _d.sent();
                        if (!(cachedValue === undefined)) return [3 /*break*/, 7];
                        return [4 /*yield*/, jws_js_1.Jws.verifySignature(this.jws.payload, signatureEntry, publicJwk)];
                    case 5:
                        isVerified = _d.sent();
                        return [4 /*yield*/, this.cache.set(cacheKey, isVerified)];
                    case 6:
                        _d.sent();
                        return [3 /*break*/, 8];
                    case 7:
                        isVerified = cachedValue;
                        _d.label = 8;
                    case 8:
                        did = jws_js_1.Jws.extractDid(kid);
                        if (isVerified) {
                            signers.push(did);
                        }
                        else {
                            throw new Error("signature verification failed for ".concat(did));
                        }
                        _d.label = 9;
                    case 9:
                        _b = _a.next();
                        return [3 /*break*/, 2];
                    case 10: return [3 /*break*/, 13];
                    case 11:
                        e_1_1 = _d.sent();
                        e_1 = { error: e_1_1 };
                        return [3 /*break*/, 13];
                    case 12:
                        try {
                            if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                        }
                        finally { if (e_1) throw e_1.error; }
                        return [7 /*endfinally*/];
                    case 13: return [2 /*return*/, { signers: signers }];
                }
            });
        });
    };
    /**
     * Gets the public key given a fully qualified key ID (`kid`).
     */
    GeneralJwsVerifier.getPublicKey = function (kid, didResolver) {
        return __awaiter(this, void 0, void 0, function () {
            var did, didDocument, _a, verificationMethods, verificationMethod, verificationMethods_1, verificationMethods_1_1, vm, publicJwk;
            var e_2, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        did = jws_js_1.Jws.extractDid(kid);
                        return [4 /*yield*/, didResolver.resolve(did)];
                    case 1:
                        didDocument = (_c.sent()).didDocument;
                        _a = (didDocument || {}).verificationMethod, verificationMethods = _a === void 0 ? [] : _a;
                        try {
                            for (verificationMethods_1 = __values(verificationMethods), verificationMethods_1_1 = verificationMethods_1.next(); !verificationMethods_1_1.done; verificationMethods_1_1 = verificationMethods_1.next()) {
                                vm = verificationMethods_1_1.value;
                                // consider optimizing using a set for O(1) lookups if needed
                                // key ID in DID Document may or may not be fully qualified. e.g.
                                // `did:ion:alice#key1` or `#key1`
                                if (kid.endsWith(vm.id)) {
                                    verificationMethod = vm;
                                    break;
                                }
                            }
                        }
                        catch (e_2_1) { e_2 = { error: e_2_1 }; }
                        finally {
                            try {
                                if (verificationMethods_1_1 && !verificationMethods_1_1.done && (_b = verificationMethods_1.return)) _b.call(verificationMethods_1);
                            }
                            finally { if (e_2) throw e_2.error; }
                        }
                        if (!verificationMethod) {
                            throw new Error('public key needed to verify signature not found in DID Document');
                        }
                        (0, schema_validator_js_1.validateJsonSchema)('JwkVerificationMethod', verificationMethod);
                        publicJwk = verificationMethod.publicKeyJwk;
                        return [2 /*return*/, publicJwk];
                }
            });
        });
    };
    return GeneralJwsVerifier;
}());
exports.GeneralJwsVerifier = GeneralJwsVerifier;
//# sourceMappingURL=verifier.js.map