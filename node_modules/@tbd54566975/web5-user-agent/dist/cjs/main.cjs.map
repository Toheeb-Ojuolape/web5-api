{
  "version": 3,
  "sources": ["../../src/main.ts", "../../src/web5-user-agent.ts", "../../src/profile-store.ts", "../../src/profile-index.ts", "../../src/profile-api.ts", "../../src/dwn-rpc-client.ts", "../../src/utils.ts", "../../src/sync-api.ts"],
  "sourcesContent": ["export * from './web5-user-agent.js';\nexport * from './profile-manager.js';\nexport * from './profile-api.js';\nexport * from './profile-store.js';\nexport * from './sync-manager.js';\nexport * from './sync-api.js';", "import type { DwnServiceEndpoint } from '@tbd54566975/dids';\nimport {\n  SignatureInput,\n  RecordsWriteOptions,\n  RecordsWriteMessage,\n  PrivateJwk as DwnPrivateKeyJwk,\n  MessagesGetReply,\n  DataStream,\n  RecordsReadReply,\n  MessageReply,\n} from '@tbd54566975/dwn-sdk-js';\n\nimport { Readable } from 'readable-stream';\nimport {\n  DwnRpc,\n  Web5Agent,\n  DwnRpcRequest,\n  ProcessDwnRequest,\n  DwnResponse,\n  SendDwnRequest,\n} from '@tbd54566975/web5-agent';\n\nimport {\n  Cid,\n  Encoder,\n  Message\n} from '@tbd54566975/dwn-sdk-js';\n\nimport type { SyncManager } from './sync-manager.js';\nimport type { ProfileManager } from './profile-manager.js';\n\nimport { DidResolver, DidIonApi, DidKeyApi, utils as didUtils } from '@tbd54566975/dids';\nimport {\n  Dwn,\n  EventsGet,\n  RecordsRead,\n  MessagesGet,\n  RecordsWrite,\n  RecordsQuery,\n  RecordsDelete,\n  DwnMethodName,\n  ProtocolsQuery,\n  DwnInterfaceName,\n  ProtocolsConfigure,\n} from '@tbd54566975/dwn-sdk-js';\n\nimport { ProfileApi } from './profile-api.js';\nimport { DwnRpcClient } from './dwn-rpc-client.js';\nimport { blobToIsomorphicNodeReadable, webReadableToIsomorphicNodeReadable } from './utils.js';\n\n// TODO: allow user to provide optional array of DwnRpc implementations once DwnRpc has been moved out of this package\nexport type Web5UserAgentOptions = {\n  dwn: Dwn;\n  profileManager: ProfileManager;\n  didResolver: DidResolver;\n  syncManager?: SyncManager;\n};\n\ntype DwnMessage = {\n  message: any;\n  data?: Blob;\n}\n\nconst dwnMessageCreators = {\n  [DwnInterfaceName.Events + DwnMethodName.Get]          : EventsGet,\n  [DwnInterfaceName.Messages + DwnMethodName.Get]        : MessagesGet,\n  [DwnInterfaceName.Records + DwnMethodName.Read]        : RecordsRead,\n  [DwnInterfaceName.Records + DwnMethodName.Query]       : RecordsQuery,\n  [DwnInterfaceName.Records + DwnMethodName.Write]       : RecordsWrite,\n  [DwnInterfaceName.Records + DwnMethodName.Delete]      : RecordsDelete,\n  [DwnInterfaceName.Protocols + DwnMethodName.Query]     : ProtocolsQuery,\n  [DwnInterfaceName.Protocols + DwnMethodName.Configure] : ProtocolsConfigure,\n};\n\nexport class Web5UserAgent implements Web5Agent {\n  private dwn: Dwn;\n  private profileManager: ProfileManager;\n  private didResolver: DidResolver;\n  private dwnRpcClient: DwnRpc;\n  private syncManager: SyncManager;\n\n  constructor(options: Web5UserAgentOptions) {\n    this.dwn = options.dwn;\n    this.didResolver = options.didResolver;\n    this.profileManager = options.profileManager;\n    this.dwnRpcClient = new DwnRpcClient();\n\n    if (options.syncManager) {\n      this.syncManager = options.syncManager;\n    }\n  }\n\n  /**\n   * TODO: add jsdoc\n   * @param options\n   * @returns\n   */\n  static async create(options: Partial<Web5UserAgentOptions>) {\n    options.dwn ||= await Dwn.create();\n    options.profileManager ||= new ProfileApi();\n    options.didResolver ||= new DidResolver({ methodResolvers: [new DidIonApi(), new DidKeyApi()] });\n\n    return new Web5UserAgent(options as Web5UserAgentOptions);\n  }\n\n  /**\n   * TODO: add jsdoc\n   * @param message\n   * @returns\n   */\n  async processDwnRequest(request: ProcessDwnRequest): Promise<DwnResponse> {\n    const { message, dataStream }= await this.#constructDwnMessage(request);\n\n    let reply: MessageReply;\n    if (request.store !== false) {\n      reply = await this.dwn.processMessage(request.target, message, dataStream as any);\n    } else {\n      reply = { status: { code: 202, detail: 'Accepted' }};\n    }\n\n    return {\n      reply,\n      message    : message,\n      messageCid : await Message.getCid(message)\n    };\n  }\n\n  async sendDwnRequest(request: SendDwnRequest): Promise<DwnResponse> {\n    const dwnRpcRequest: Partial<DwnRpcRequest> = { targetDid: request.target };\n    let messageData;\n\n    if ('messageCid' in request) {\n      const { message, data } =  await this.#getDwnMessage(request.author, request.messageType, request.messageCid);\n\n      dwnRpcRequest.message = message;\n      messageData = data;\n    } else {\n      const { message } = await this.#constructDwnMessage(request);\n      dwnRpcRequest.message = message;\n      messageData = request.dataStream;\n    }\n\n    if (messageData) {\n      dwnRpcRequest.data = messageData;\n    }\n\n    const didResolution = await this.didResolver.resolve(request.target);\n    if (!didResolution.didDocument) {\n      if (didResolution.didResolutionMetadata?.error) {\n        throw new Error(`DID resolution error: ${didResolution.didResolutionMetadata.error}`);\n      } else {\n        throw new Error('DID resolution error: figure out error message');\n      }\n    }\n\n    const [ service ] = didUtils.getServices(didResolution.didDocument, { id: '#dwn' });\n    if (!service) {\n      throw new Error(`${request.target} has no '#dwn' service endpoints`);\n    }\n\n    const { serviceEndpoint } = service;\n    if (!serviceEndpoint['nodes']) {\n      throw new Error(`malformed '#dwn' service endpoint. expected nodes array`);\n    }\n\n    const { nodes } = serviceEndpoint as DwnServiceEndpoint;\n    let dwnReply;\n    let errorMessages = [];\n\n    // try sending to author's publicly addressable dwn's until first request succeeds.\n    for (let node of nodes) {\n      dwnRpcRequest.dwnUrl = node;\n\n      try {\n        dwnReply = await this.dwnRpcClient.sendDwnRequest(dwnRpcRequest as DwnRpcRequest);\n        break;\n      } catch(e) {\n        errorMessages.push({ url: node, message: e.message });\n      }\n    }\n\n    if (!dwnReply) {\n      throw new Error(JSON.stringify(errorMessages));\n    }\n\n    return {\n      message    : dwnRpcRequest.message,\n      messageCid : await Message.getCid(dwnRpcRequest.message),\n      reply      : dwnReply,\n    };\n  }\n\n  async #getDwnMessage(author: string, messageType: string, messageCid: string): Promise<DwnMessage> {\n    const dwnSignatureInput = await this.#getAuthorSignatureInput(author);\n    const messagesGet = await MessagesGet.create({\n      authorizationSignatureInput : dwnSignatureInput,\n      messageCids                 : [messageCid]\n    });\n\n    const result: MessagesGetReply = await this.dwn.processMessage(author, messagesGet.toJSON());\n    const [ messageEntry ] = result.messages;\n\n    if (!messageEntry) {\n      throw new Error('TODO: figure out error message');\n    }\n\n    let { message } = messageEntry;\n    if (!message) {\n      throw new Error('TODO: message not found');\n    }\n\n    let dwnMessage: DwnMessage = { message };\n\n    // if the message is a RecordsWrite, either data will be present, OR we have to fetch it using a RecordsRead\n    if (messageType === 'RecordsWrite') {\n      const { encodedData } = messageEntry;\n      message = message as RecordsWriteMessage;\n\n      if (encodedData) {\n        const dataBytes = Encoder.base64UrlToBytes(encodedData);\n        dwnMessage.data = new Blob([dataBytes]);\n      } else {\n        const recordsRead = await RecordsRead.create({\n          authorizationSignatureInput : dwnSignatureInput,\n          recordId                    : message['recordId']\n        });\n\n        const reply = await this.dwn.processMessage(author, recordsRead.toJSON()) as RecordsReadReply;\n\n        if (reply.status.code >= 400) {\n          const { status: { code, detail } } = reply;\n          throw new Error(`(${code}) Failed to read data associated with record ${message['recordId']}. ${detail}}`);\n        } else {\n          const dataBytes = await DataStream.toBytes(reply.record.data);\n          dwnMessage.data = new Blob([dataBytes]);\n        }\n      }\n    }\n\n    return dwnMessage;\n  }\n\n  async #constructDwnMessage(request: ProcessDwnRequest) {\n    const dwnSignatureInput = await this.#getAuthorSignatureInput(request.author);\n    let readableStream: Readable;\n\n    // TODO: Consider refactoring to move data transformations imposed by fetch() limitations to the HTTP transport-related methods.\n    if (request.messageType === 'RecordsWrite') {\n      const messageOptions = request.messageOptions as RecordsWriteOptions;\n\n      if (request.dataStream && !messageOptions.data) {\n        const { dataStream } = request;\n        let isomorphicNodeReadable: Readable;\n\n        if (dataStream instanceof Blob) {\n          isomorphicNodeReadable = blobToIsomorphicNodeReadable(dataStream);\n\n          readableStream = blobToIsomorphicNodeReadable(dataStream);\n        } else if (dataStream instanceof ReadableStream) {\n          const [ forCid, forProcessMessage ] = dataStream.tee();\n\n          isomorphicNodeReadable = webReadableToIsomorphicNodeReadable(forCid);\n          readableStream = webReadableToIsomorphicNodeReadable(forProcessMessage);\n        }\n\n        messageOptions.dataCid = await Cid.computeDagPbCidFromStream(isomorphicNodeReadable);\n        messageOptions.dataSize ??= isomorphicNodeReadable['bytesRead'];\n      }\n    }\n\n    // TODO: Figure out how to narrow this type. may have figured something out in `web5.DidInterface`\n    const messageCreateInput = {\n      ...<any>request.messageOptions,\n      authorizationSignatureInput: dwnSignatureInput\n    };\n\n    const messageCreator = dwnMessageCreators[request.messageType];\n    const dwnMessage = await messageCreator.create(messageCreateInput as any);\n\n    return { message: dwnMessage.toJSON(), dataStream: readableStream };\n  }\n\n  /**\n   * constructs signature input required to sign DWeb Messages\n   * @param authorDid\n   * @returns {SignatureInput}\n   */\n  async #getAuthorSignatureInput(authorDid: string): Promise<SignatureInput> {\n    const profile = await this.profileManager.getProfile(authorDid);\n\n    if (!profile) {\n      throw new Error('profile not found for author.');\n    }\n\n    const { keys } = profile.did;\n    const [ key ] = keys;\n    const { privateKeyJwk } = key;\n\n    // TODO: make far less naive\n    const kidFragment = privateKeyJwk.kid || key.id;\n    const kid = `${profile.did.id}#${kidFragment}`;\n\n    const dwnSignatureInput: SignatureInput = {\n      privateJwk      : <DwnPrivateKeyJwk>privateKeyJwk,\n      protectedHeader : { alg: privateKeyJwk.crv, kid }\n    };\n\n    return dwnSignatureInput;\n  }\n}", "import type { Filter, QueryStore } from '@tbd54566975/web5-agent';\nimport type { Profile } from './profile-manager.js';\n\nimport { Level } from 'level';\n\nimport { ProfileIndex } from './profile-index.js';\n// TODO: refactor to use another underlying datastore\n\nexport type ProfileStoreOptions = {\n  location?: string;\n  indexLocation?: string;\n};\nexport class ProfileStore implements QueryStore<Profile> {\n  private db: Level;\n  private index: ProfileIndex;\n\n  private static _defaultOptions = {\n    location      : 'data/agent/profiles',\n    indexLocation : 'data/agent/profiles-index'\n  };\n\n  constructor(options: ProfileStoreOptions = {}) {\n    options = { ...ProfileStore._defaultOptions, ...options };\n\n    this.db = new Level(options.location);\n    this.index = new ProfileIndex(options.indexLocation);\n  }\n\n  async put(entry: Profile): Promise<void> {\n    const key = this.generateKey(entry.id);\n    const value = JSON.stringify(entry);\n\n    await this.db.put(key, value);\n    await this.index.put(entry);\n  }\n\n  async get(id: string): Promise<Profile | undefined> {\n    const key = this.generateKey(id);\n\n    try {\n      const value = await this.db.get(key);\n\n      return JSON.parse(value);\n    } catch(e: any) {\n      if (e.code === 'LEVEL_NOT_FOUND') {\n        return undefined;\n      }\n    }\n  }\n\n  async query(filter: Filter): Promise<Profile[]> {\n    const results = await this.index.query(filter);\n    const profiles = [];\n\n    const serializedProfiles = await this.db.getMany(results);\n    for (let serializedProfile of serializedProfiles) {\n      profiles.push(JSON.parse(serializedProfile));\n    }\n\n    return profiles;\n  }\n\n  async all(): Promise<Profile[]> {\n    const serializedProfiles = await this.db.values().all();\n    const profiles = [];\n\n    for (let serializedProfile of serializedProfiles) {\n      profiles.push(JSON.parse(serializedProfile));\n    }\n\n    return profiles;\n  }\n\n  async delete(): Promise<void> {\n    throw new Error('Method not implemented.');\n  }\n\n  async clear(): Promise<void> {\n    await this.index.clear();\n    await this.db.clear();\n\n    return;\n  }\n\n  async close(): Promise<void> {\n    await this.index.close();\n    await this.db.close();\n\n    return;\n  }\n\n  private generateKey(id: string) {\n    return `PROFILE_${id}`;\n  }\n\n}", "import type { AbstractBatchOperation, AbstractBatchDelOperation } from 'abstract-level';\n\nimport { Level } from 'level';\nimport flat from 'flat';\n\nconst { flatten } = flat;\n\nexport type Record = {\n  id: string,\n  [prop: string]: unknown\n};\n\nexport type RangeFilter = {\n  gt?: any,\n  gte?: any,\n  lt?: any,\n  lte?: any\n};\n\nexport type TermFilter = string | number | boolean\n\nexport type Filter = {\n  [prop: string]: TermFilter | TermFilter[] | RangeFilter\n}\n\nexport class ProfileIndex {\n  level: Level<string, string>;\n\n  constructor(private location = 'data/agent/profiles-index') {\n    this.level = new Level(location);\n  }\n\n  async delete(id: string): Promise<void> {\n    const ops: AbstractBatchDelOperation<typeof this.level, string>[] = [];\n\n    let keyPrefixes: string | string[] = await this.level.get(`__${id}__meta`);\n    if (!keyPrefixes) {\n      return;\n    }\n\n    keyPrefixes = keyPrefixes.split('@');\n\n    for (let keyPrefix of keyPrefixes) {\n      const op = { type: 'del' as const, key: `${keyPrefix}~${id}` };\n      ops.push(op);\n    }\n\n    ops.push({ type: 'del' as const, key: `__${id}__meta` });\n\n    await this.level.batch(ops);\n  }\n\n  async put(record: Record): Promise<void> {\n    const flattenedRecord: Record = flatten(record);\n    let { id } = flattenedRecord;\n\n    let keyPrefixes: string[] = [];\n    const ops: AbstractBatchOperation<typeof this.level, string, string>[] = [];\n    for (let property in flattenedRecord) {\n      if (property === 'id') {\n        continue;\n      }\n\n      const propVal = flattenedRecord[property];\n      const keyPrefix = `${property}~${propVal}`;\n      const key = `${keyPrefix}~${id}`;\n\n      ops.push({ type: 'put', key, value: id });\n      keyPrefixes.push(keyPrefix);\n    }\n\n    ops.push({ type: 'put', key: `__${id}__meta`, value: keyPrefixes.join('@')  });\n\n    await this.level.batch(ops);\n  }\n\n  async query(filter: Filter): Promise<Array<string>> {\n    const matches: { [docId: string]: number } = {};\n    const promises: Promise<void>[] = [];\n\n    for (let propertyName in filter) {\n      const propertyValue = filter[propertyName];\n\n      if (typeof propertyValue === 'object' && propertyValue !== null) {\n        if (Array.isArray(propertyValue)) {\n          // OR query\n          for (let value of propertyValue) {\n            const promise = this.buildTermQuery(propertyName, value, matches);\n            promises.push(promise);\n          }\n        } else {\n          const promise = this.buildRangeQuery(propertyName, propertyValue, matches);\n          promises.push(promise);\n        }\n      } else {\n        const promise = this.buildTermQuery(propertyName, propertyValue, matches);\n        promises.push(promise);\n      }\n    }\n\n    const numFilters = Object.keys(filter).length;\n    const docIds: string[] = [];\n    await Promise.all(promises);\n\n    for (let docId in matches) {\n      if (matches[docId] === numFilters) {\n        docIds.push(docId);\n      }\n    }\n\n    return docIds;\n  }\n\n  async buildTermQuery(propertyName: string, propertyValue: unknown, matches: { [docId: string]: number }): Promise<void> {\n    const key = `${propertyName}~${propertyValue}`;\n    const iteratorOptions = {\n      gt: `${key}~`\n    };\n\n    for await (let doc of this.level.iterator(iteratorOptions)) {\n      const [k, val] = doc;\n      if (!k.includes(key)) {\n        break;\n      }\n\n      if (val in matches) {\n        matches[val] += 1;\n      } else {\n        matches[val] = 1;\n      }\n    }\n  }\n\n  async buildRangeQuery(propertyName: string, range: RangeFilter, matches: { [docId: string]: number }): Promise<void> {\n    const key = `${propertyName}`;\n    const iteratorOptions: { [key: string]: any } = {};\n\n    for (let inequality in range) {\n      iteratorOptions[inequality] = `${propertyName}~${range[inequality as keyof RangeFilter]}`;\n    }\n\n    for await (let doc of this.level.iterator(iteratorOptions)) {\n      const [k, val] = doc;\n      if (!k.includes(key)) {\n        break;\n      }\n\n      if (val in matches) {\n        matches[val] += 1;\n      } else {\n        matches[val] = 1;\n      }\n    }\n  }\n\n  async clear(): Promise<void> {\n    this.level.clear();\n  }\n\n  async close(): Promise<void> {\n    return this.level.close();\n  }\n}", "import type { QueryStore } from '@tbd54566975/web5-agent';\nimport type { CreateProfileOptions, Profile, ProfileManager } from './profile-manager.js';\n\nimport { ProfileStore } from './profile-store.js';\n\nexport class ProfileApi implements ProfileManager {\n  private store: QueryStore<Profile>;\n\n  constructor(store?: QueryStore<Profile>) {\n    this.store = store ||= new ProfileStore();\n  }\n\n  async createProfile(options: CreateProfileOptions): Promise<Profile> {\n    if (!options.did && !options.didMethod) {\n      throw new Error('must provide did or didMethod');\n    }\n\n    const profile: Partial<Profile> = {\n      name        : options.name,\n      icon        : options.icon,\n      dateCreated : new Date(),\n    };\n\n    if (options.did) {\n      profile.did = options.did;\n    } else {\n      // TODO: create DID based on didMethod\n    }\n\n    profile.id = options.did?.id;\n    await this.store.put(profile as Profile);\n\n    return profile as Profile;\n  }\n\n  getProfile(id: string): Promise<Profile | undefined> {\n    return this.store.get(id);\n  }\n\n  // TODO: discuss whether we want to rename this to getProfiles instead\n  listProfiles(): Promise<Profile[]> {\n    return this.store.all();\n  }\n}", "import type { DwnRpc, DwnRpcRequest, DwnRpcResponse, JsonRpcResponse } from '@tbd54566975/web5-agent';\n\nimport { v4 as uuidv4 } from 'uuid';\nimport { createJsonRpcRequest, parseJson } from '@tbd54566975/web5-agent';\n\n// TODO: move what's below to dwn-server repo. i wrote this here for expediency\n\n/**\n * Client used to communicate with Dwn Servers\n */\nexport class DwnRpcClient implements DwnRpc {\n  #transportClients: Map<string, DwnRpc>;\n\n  constructor(clients: DwnRpc[] = []) {\n    this.#transportClients = new Map();\n\n    // include http client as default. can be overwritten for 'http:' or 'https:' if instantiator provides\n    // their own.\n    clients = [new HttpDwnRpcClient(), ...clients];\n\n    for (let client of clients) {\n      for (let transportScheme of client.transportProtocols) {\n        this.#transportClients.set(transportScheme, client);\n      }\n    }\n  }\n\n  get transportProtocols(): string[] {\n    return Array.from(this.#transportClients.keys());\n  }\n\n  sendDwnRequest(request: DwnRpcRequest): Promise<DwnRpcResponse> {\n    // will throw if url is invalid\n    const url = new URL(request.dwnUrl);\n\n    const transportClient = this.#transportClients.get(url.protocol);\n    if (!transportClient) {\n      const error = new Error(`no ${url.protocol} transport client available`);\n      error.name = 'NO_TRANSPORT_CLIENT';\n\n      throw error;\n    }\n\n    return transportClient.sendDwnRequest(request);\n  }\n}\n\n// TODO: move to dwn-server repo. i wrote this here for expediency\n\n/**\n * Http client that can be used to communicate with Dwn Servers\n */\nclass HttpDwnRpcClient implements DwnRpc {\n  get transportProtocols() { return ['http:', 'https:']; }\n\n  async sendDwnRequest(request: DwnRpcRequest): Promise<DwnRpcResponse> {\n    const requestId = uuidv4();\n    const jsonRpcRequest = createJsonRpcRequest(requestId, 'dwn.processMessage', {\n      target  : request.targetDid,\n      message : request.message\n    });\n\n    const fetchOpts = {\n      method  : 'POST',\n      headers : {\n        'dwn-request': JSON.stringify(jsonRpcRequest)\n      }\n    };\n\n    if (request.data) {\n      fetchOpts.headers['content-type'] = 'application/octet-stream';\n      fetchOpts['body'] = request.data;\n    }\n\n    const resp = await fetch(request.dwnUrl, fetchOpts);\n    let dwnRpcResponse: JsonRpcResponse;\n\n    // check to see if response is in header first. if it is, that means the response is a ReadableStream\n    let dataStream;\n    const { headers } = resp;\n    if (headers.has('dwn-response')) {\n      const jsonRpcResponse = parseJson(headers.get('dwn-response')) as JsonRpcResponse;\n\n      if (jsonRpcResponse == null) {\n        throw new Error(`failed to parse json rpc response. dwn url: ${request.dwnUrl}`);\n      }\n\n      dataStream = resp.body;\n      dwnRpcResponse = jsonRpcResponse;\n    } else {\n      // TODO: wonder if i need to try/catch this?\n      const responseBody = await resp.text();\n      dwnRpcResponse = JSON.parse(responseBody);\n    }\n\n    if (dwnRpcResponse.error) {\n      const { code, message } = dwnRpcResponse.error;\n      throw new Error(`(${code}) - ${message}`);\n    }\n\n    const { reply } = dwnRpcResponse.result;\n    if (dataStream) {\n      reply['record']['data'] = dataStream;\n    }\n\n    return reply as DwnRpcResponse;\n  }\n}", "import type { Readable } from 'readable-stream';\nimport { ReadableWebToNodeStream } from 'readable-web-to-node-stream';\n\nexport function blobToIsomorphicNodeReadable(blob: Blob): Readable {\n  return webReadableToIsomorphicNodeReadable(blob.stream());\n}\n\nexport function webReadableToIsomorphicNodeReadable(webReadable: ReadableStream) {\n  return new ReadableWebToNodeStream(webReadable);\n}", "import type { DwnRpc } from '@tbd54566975/web5-agent';\nimport type { BatchOperation } from 'level';\nimport type { DwnServiceEndpoint, DidResolver } from '@tbd54566975/dids';\nimport type {\n  Dwn,\n  EventsGetReply,\n  MessagesGetReply,\n  SignatureInput,\n  RecordsWriteMessage,\n  RecordsReadReply,\n  PrivateJwk as DwnPrivateKeyJwk,\n  Event,\n} from '@tbd54566975/dwn-sdk-js';\n\nimport type { ProfileManager } from './profile-manager.js';\n\nimport { Level } from 'level';\nimport { utils as didUtils } from '@tbd54566975/dids';\nimport { DataStream, EventsGet, MessagesGet, Encoder, RecordsRead } from '@tbd54566975/dwn-sdk-js';\n\n\nimport { SyncManager } from './sync-manager.js';\nimport { DwnRpcClient } from './dwn-rpc-client.js';\nimport { webReadableToIsomorphicNodeReadable } from './utils.js';\n\nexport type SyncApiOptions = {\n  dwn: Dwn;\n  didResolver: DidResolver;\n  profileManager: ProfileManager;\n  storeLocation?: string;\n};\n\ntype Direction = 'push' | 'pull';\n\ntype SyncState = {\n  did: string;\n  dwnUrl: string;\n  watermark: string | undefined;\n}\n\ntype DwnMessage = {\n  message: any;\n  data?: Blob;\n}\n\ntype DbBatchOperation = BatchOperation<Level, string, string>;\n\nexport class SyncApi implements SyncManager {\n  #db: Level;\n  #dwn: Dwn;\n  #didResolver: DidResolver;\n  #profileManager: ProfileManager;\n  #dwnRpcClient: DwnRpc;\n\n  static #defaultOptions = {\n    storeLocation: 'data/agent/sync-store',\n  };\n\n  constructor(options: SyncApiOptions) {\n    options = { ...SyncApi.#defaultOptions, ...options };\n    this.#dwn = options.dwn;\n    this.#didResolver = options.didResolver;\n    this.#profileManager = options.profileManager;\n\n    this.#db = new Level(options.storeLocation);\n    this.#dwnRpcClient = new DwnRpcClient();\n  }\n\n  async clear() {\n    return this.#db.clear();\n  }\n\n  async registerProfile(did: string): Promise<void> {\n    const registeredProfiles = this.#db.sublevel('registeredProfiles');\n\n    await registeredProfiles.put(did, '');\n  }\n\n  async enqueuePush() {\n    const profileDids = await this.#db.sublevel('registeredProfiles').keys().all();\n    const syncStates: SyncState[] = [];\n\n    for (let did of profileDids) {\n      // TODO: try/catch\n      const { didDocument } = await this.#didResolver.resolve(did);\n      const [ service ] = didUtils.getServices(didDocument, { id: '#dwn', type: 'DecentralizedWebNode' });\n\n      // did has no dwn service endpoints listed in DID Doc. ignore\n      if (!service) {\n        continue;\n      }\n\n      const { nodes } = <DwnServiceEndpoint>service.serviceEndpoint;\n\n      for (let node of nodes) {\n        const watermark = await this.getWatermark(did, node, 'push');\n        syncStates.push({ did, dwnUrl: node, watermark });\n      }\n    }\n\n    for (let syncState of syncStates) {\n      const signatureInput = await this.#getAuthorSignatureInput(syncState.did);\n      const eventsGet = await EventsGet.create({\n        watermark                   : syncState.watermark,\n        authorizationSignatureInput : signatureInput\n      });\n\n      const eventsReply = await this.#dwn.processMessage(syncState.did, eventsGet.toJSON()) as EventsGetReply;\n      const putOps: DbBatchOperation[] = [];\n\n      for (let event of eventsReply.events) {\n        const pushKey = `${syncState.did}~${syncState.dwnUrl}~${event.messageCid}`;\n        const putOp: DbBatchOperation = { type: 'put', key: pushKey, value: event.watermark };\n\n        putOps.push(putOp);\n      }\n\n      const pushQueue = this.#getPushQueue();\n      await pushQueue.batch(putOps as any);\n    }\n  }\n\n  async getEvents(did: string, watermark: string | undefined, dwnUrl: string) {\n    const signatureInput = await this.#getAuthorSignatureInput(did);\n    const eventsGet = await EventsGet.create({\n      watermark                   : watermark,\n      authorizationSignatureInput : signatureInput\n    });\n\n    let events: Event[];\n    if (dwnUrl === 'local') {\n      const reply = await this.#dwn.processMessage(did, eventsGet.toJSON()) as EventsGetReply;\n      ({ events } = reply);\n    } else {\n      const reply = await this.#dwnRpcClient.sendDwnRequest({\n        dwnUrl,\n        targetDid : did,\n        message   : eventsGet\n      }) as EventsGetReply;\n\n      ({ events } = reply);\n    }\n\n    return events;\n  }\n\n  async push() {\n    await this.enqueuePush();\n\n    const pushQueue = this.#getPushQueue();\n    const pushJobs = await pushQueue.iterator().all();\n    const errored: Set<string> = new Set();\n\n    const delOps: DbBatchOperation[] = [];\n\n    for (let job of pushJobs) {\n      const [key, watermark] = job;\n      const [did, dwnUrl, messageCid] = key.split('~');\n\n      if (errored.has(dwnUrl)) {\n        continue;\n      }\n\n      const dwnMessage = await this.#getDwnMessage(did, messageCid);\n      if (!dwnMessage) {\n        delOps.push({ type: 'del', key: key });\n        await this.setWatermark(did, dwnUrl, 'push', watermark);\n        await this.#addMessage(did, messageCid);\n\n        continue;\n      }\n\n      try {\n        const reply = await this.#dwnRpcClient.sendDwnRequest({\n          dwnUrl,\n          targetDid : did,\n          data      : dwnMessage.data,\n          message   : dwnMessage.message\n        });\n\n        if (reply.status.code === 202 || reply.status.code === 409) {\n          delOps.push({ type: 'del', key: key });\n          await this.setWatermark(did, dwnUrl, 'push', watermark);\n          await this.#addMessage(did, messageCid);\n        }\n      } catch(e) {\n        errored.add(dwnUrl);\n      }\n    }\n\n    await pushQueue.batch(delOps as any);\n  }\n\n  async enqueuePull() {\n    const profileDids = await this.#db.sublevel('registeredProfiles').keys().all();\n    const syncStates: SyncState[] = [];\n\n    for (let did of profileDids) {\n      // TODO: try/catch\n      const { didDocument } = await this.#didResolver.resolve(did);\n      const [ service ] = didUtils.getServices(didDocument, { id: '#dwn', type: 'DecentralizedWebNode' });\n\n      // did has no dwn service endpoints listed in DID Doc. ignore\n      if (!service) {\n        continue;\n      }\n\n      const { nodes } = <DwnServiceEndpoint>service.serviceEndpoint;\n      for (let node of nodes) {\n        const watermark = await this.getWatermark(did, node, 'pull');\n        syncStates.push({ did, dwnUrl: node, watermark });\n      }\n    }\n\n    const pullOps: DbBatchOperation[] = [];\n\n    for (let syncState of syncStates) {\n      const signatureInput = await this.#getAuthorSignatureInput(syncState.did);\n      const eventsGet = await EventsGet.create({\n        watermark                   : syncState.watermark,\n        authorizationSignatureInput : signatureInput\n      });\n\n      let reply: EventsGetReply;\n\n      try {\n        reply = await this.#dwnRpcClient.sendDwnRequest({\n          dwnUrl    : syncState.dwnUrl,\n          targetDid : syncState.did,\n          message   : eventsGet\n        }) as EventsGetReply;\n      } catch(e) {\n        continue;\n      }\n\n      for (let event of reply.events) {\n        const pullKey = `${syncState.did}~${syncState.dwnUrl}~${event.messageCid}`;\n        const pullOp: DbBatchOperation = { type: 'put', key: pullKey, value: event.watermark };\n\n        pullOps.push(pullOp);\n      }\n\n      if (pullOps.length > 0) {\n        const pullQueue = this.#getPullQueue();\n        pullQueue.batch(pullOps as any);\n      }\n    }\n  }\n\n  async pull() {\n    await this.enqueuePull();\n\n    const pullQueue = this.#getPullQueue();\n    const pullJobs = await pullQueue.iterator().all();\n    const delOps: DbBatchOperation[] = [];\n    const errored: Set<string> = new Set();\n\n    for (let job of pullJobs) {\n      const [key, watermark] = job;\n      const [did, dwnUrl, messageCid] = key.split('~');\n\n      if (errored.has(dwnUrl)) {\n        continue;\n      }\n\n      const messageExists = await this.#messageExists(did, messageCid);\n      if (messageExists) {\n        await this.setWatermark(did, dwnUrl, 'pull', watermark);\n        delOps.push({ type: 'del', key });\n\n        continue;\n      }\n\n      const signatureInput = await this.#getAuthorSignatureInput(did);\n      const messagesGet = await MessagesGet.create({\n        messageCids                 : [messageCid],\n        authorizationSignatureInput : signatureInput\n      });\n\n      let reply: MessagesGetReply;\n\n      try {\n        reply = await this.#dwnRpcClient.sendDwnRequest({\n          dwnUrl,\n          targetDid : did,\n          message   : messagesGet\n        }) as MessagesGetReply;\n      } catch(e) {\n        errored.add(dwnUrl);\n        continue;\n      }\n\n      for (let entry of reply.messages) {\n        if (entry.error || !entry.message) {\n          console.warn(`message ${messageCid} not found. entry: ${JSON.stringify(entry, null, 2)} ignoring..`);\n\n          await this.setWatermark(did, dwnUrl, 'pull', watermark);\n          await this.#addMessage(did, messageCid);\n          delOps.push({ type: 'del', key });\n\n          continue;\n        }\n\n        const messageType = this.#getDwnMessageType(entry.message);\n        let dataStream;\n\n        if (messageType === 'RecordsWrite') {\n          const { encodedData } = entry;\n          const message = entry.message as RecordsWriteMessage;\n\n          if (encodedData) {\n            const dataBytes = Encoder.base64UrlToBytes(encodedData);\n            dataStream = DataStream.fromBytes(dataBytes);\n          } else {\n            const recordsRead = await RecordsRead.create({\n              authorizationSignatureInput : signatureInput,\n              recordId                    : message['recordId']\n            });\n\n            const recordsReadReply = await this.#dwnRpcClient.sendDwnRequest({\n              targetDid : did,\n              dwnUrl,\n              message   : recordsRead\n            }) as RecordsReadReply;\n\n            if (recordsReadReply.status.code >= 400) {\n              const pruneReply = await this.#dwn.synchronizePrunedInitialRecordsWrite(did, message);\n\n              if (pruneReply.status.code === 202 || pruneReply.status.code === 409) {\n                await this.setWatermark(did, dwnUrl, 'pull', watermark);\n                await this.#addMessage(did, messageCid);\n                delOps.push({ type: 'del', key });\n\n                continue;\n              } else {\n                throw new Error(`Failed to sync tombstone. message cid: ${messageCid}`);\n              }\n            } else {\n              dataStream = webReadableToIsomorphicNodeReadable(recordsReadReply.record.data as any);\n            }\n          }\n        }\n\n        const pullReply = await this.#dwn.processMessage(did, entry.message, dataStream);\n\n        if (pullReply.status.code === 202 || pullReply.status.code === 409) {\n          await this.setWatermark(did, dwnUrl, 'pull', watermark);\n          await this.#addMessage(did, messageCid);\n          delOps.push({ type: 'del', key });\n        }\n      }\n    }\n\n    await pullQueue.batch(delOps as any);\n  }\n\n  async #getDwnMessage(author: string, messageCid: string): Promise<DwnMessage> {\n    const dwnSignatureInput = await this.#getAuthorSignatureInput(author);\n    const messagesGet = await MessagesGet.create({\n      authorizationSignatureInput : dwnSignatureInput,\n      messageCids                 : [messageCid]\n    });\n\n    const result: MessagesGetReply = await this.#dwn.processMessage(author, messagesGet.toJSON());\n    const [ messageEntry ] = result.messages;\n\n    // absence of a messageEntry or message within messageEntry can happen because updating a Record actually creates another\n    // RecordsWrite with the same recordId. only the first and most recent RecordsWrite messages are kept for a given\n    // recordId. any in between are outright nuked from everywhere.\n    if (!messageEntry) {\n      return undefined;\n    }\n\n    let { message } = messageEntry;\n    if (!message) {\n      return undefined;\n    }\n\n    let dwnMessage: DwnMessage = { message };\n    const messageType = `${message.descriptor.interface}${message.descriptor.method}`;\n\n    // if the message is a RecordsWrite, either data will be present, OR we have to get it using a RecordsRead\n    if (messageType === 'RecordsWrite') {\n      const { encodedData } = messageEntry;\n      message = message as RecordsWriteMessage;\n\n      if (encodedData) {\n        const dataBytes = Encoder.base64UrlToBytes(encodedData);\n        dwnMessage.data = new Blob([dataBytes]);\n      } else {\n        const recordsRead = await RecordsRead.create({\n          authorizationSignatureInput : dwnSignatureInput,\n          recordId                    : message['recordId']\n        });\n\n        const reply = await this.#dwn.processMessage(author, recordsRead.toJSON()) as RecordsReadReply;\n\n        // if the data no longer exists (aka 404), it's likely that a `RecordsDelete` took place.\n        // `RecordsDelete` keeps a `RecordsWrite` and just deletes the associated data, effectively acting as a \"tombstone\".\n        // We still need to _push_ this tombstone so that the `RecordsDelete` can be processed successfully.\n        // if 200, return the data. if 4xx ignore for the reason explained, if >= 5xx throw error\n        if (reply.status.code === 200) {\n          const dataBytes = await DataStream.toBytes(reply.record.data);\n          dwnMessage.data = new Blob([dataBytes]);\n        } else if (reply.status.code >= 500) {\n          const { status: { code, detail } } = reply;\n          throw new Error(`(${code}) Failed to read data associated with record ${message['recordId']}. ${detail}}`);\n        }\n      }\n    }\n\n    return dwnMessage;\n  }\n\n  /**\n   * constructs signature input required to sign DWeb Messages\n   * @param authorDid\n   * @returns {SignatureInput}\n   */\n  async #getAuthorSignatureInput(authorDid: string): Promise<SignatureInput> {\n    const profile = await this.#profileManager.getProfile(authorDid);\n\n    if (!profile) {\n      throw new Error('profile not found for author.');\n    }\n\n    const { keys } = profile.did;\n    const [ key ] = keys;\n    const { privateKeyJwk } = key;\n\n    // TODO: make far less naive\n    const kidFragment = privateKeyJwk.kid || key.id;\n    const kid = `${profile.did.id}#${kidFragment}`;\n\n    const dwnSignatureInput: SignatureInput = {\n      privateJwk      : <DwnPrivateKeyJwk>privateKeyJwk,\n      protectedHeader : { alg: privateKeyJwk.crv, kid }\n    };\n\n    return dwnSignatureInput;\n  }\n\n  async getWatermark(did: string, dwnUrl: string, direction: Direction) {\n    const wmKey = `${did}~${dwnUrl}~${direction}`;\n    const watermarkStore = this.#getWatermarkStore();\n\n    try {\n      return await watermarkStore.get(wmKey);\n    } catch (e) {\n      if (e.code === 'LEVEL_NOT_FOUND') {\n        return undefined;\n      }\n    }\n  }\n\n  async setWatermark(did: string, dwnUrl: string, direction: Direction, watermark: string) {\n    const wmKey = `${did}~${dwnUrl}~${direction}`;\n    const watermarkStore = this.#getWatermarkStore();\n\n    return watermarkStore.put(wmKey, watermark);\n  }\n\n  async #messageExists(did: string, messageCid: string) {\n    const messageStore = this.#getMessageStore(did);\n    const hashedKey = new Set([messageCid]);\n\n    const itr = messageStore.keys({ lte: messageCid, limit: 1 });\n    for await (let key of itr) {\n      if (hashedKey.has(key)) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n  }\n\n  async #addMessage(did: string, messageCid: string) {\n    const messageStore = this.#getMessageStore(did);\n\n    return messageStore.put(messageCid, '');\n  }\n\n  #getMessageStore(did: string) {\n    return this.#db.sublevel('history').sublevel(did).sublevel('messages');\n  }\n\n  #getWatermarkStore() {\n    return this.#db.sublevel('watermarks');\n  }\n\n  #getPushQueue() {\n    return this.#db.sublevel('pushQueue');\n  }\n\n  #getPullQueue() {\n    return this.#db.sublevel('pullQueue');\n  }\n\n  // TODO: export BaseMessage from dwn-sdk.\n  #getDwnMessageType(message: any) {\n    return `${message.descriptor.interface}${message.descriptor.method}`;\n  }\n}"],
  "mappings": "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",
  "names": ["import_dwn_sdk_js", "import_level", "flat", "uuidv4", "didUtils", "import_level", "import_dids", "import_dwn_sdk_js", "_getDwnMessage", "getDwnMessage_fn", "_getAuthorSignatureInput", "getAuthorSignatureInput_fn", "didUtils"]
}
